This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
.husky/pre-commit
.prettierrc.json
components.json
eslint.config.mjs
jest.config.js
jest.setup.js
jsconfig.json
next.config.mjs
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/manifest.json
public/next.svg
public/robots.txt
public/sitemap.xml
public/vercel.svg
public/window.svg
README.md
src/app/auth/magic-login/page.js
src/app/catalog/[productId]/page.js
src/app/catalog/[productId]/product.test.js
src/app/catalog/page.js
src/app/claim/claim.test.js
src/app/claim/page.js
src/app/forgot-password/page.js
src/app/globals.css
src/app/history/page.js
src/app/how-to-earn/page.js
src/app/layout.js
src/app/my-points/page.js
src/app/not-found.js
src/app/orders/page.js
src/app/page.js
src/app/profile/badges/page.js
src/app/profile/page.js
src/app/profile/refer/page.js
src/app/reset-password/page.js
src/app/scan/page.js
src/app/settings/page.js
src/components/AchievementUnlockedModal.js
src/components/AnimatedCounter.js
src/components/AnimatedPage.js
src/components/AnimatedProgressBar.js
src/components/AppEventHandler.js
src/components/Badge.js
src/components/CatalogSkeleton.js
src/components/ConfettiBlast.js
src/components/ContentModal.js
src/components/CustomToast.js
src/components/Dashboard.js
src/components/dashboard/ActionCard.js
src/components/dashboard/NewRewardsCard.js
src/components/dashboard/NextActionCarousel.js
src/components/dashboard/NextBestRewardCard.js
src/components/dashboard/ReferralCard.js
src/components/dashboard/StatusCard.js
src/components/DashboardSkeleton.js
src/components/DynamicHeader.js
src/components/DynamicPage.js
src/components/EditProfileModal.js
src/components/EmptyState.js
src/components/FloatingLabelInput.js
src/components/FloatingOnboardingBanner.js
src/components/Header.js
src/components/ImageWithLoader.js
src/components/lib/utils.js
src/components/LoginForm.js
src/components/MenuItem.js
src/components/MyPointsSkeleton.js
src/components/NavBar.js
src/components/NudgeOptionsModal.js
src/components/PageContainer.js
src/components/ProductDetailSkeleton.js
src/components/RankUpModal.js
src/components/ReferralSkeleton.js
src/components/RegisterForm.js
src/components/RegisterForm.test.js
src/components/ReportFailedScanModal.js
src/components/ShippingFormModal.js
src/components/SkeletonCard.js
src/components/StaggeredList.js
src/components/SuccessModal.js
src/components/ui/aspect-ratio.jsx
src/components/ui/badge.jsx
src/components/ui/button.jsx
src/components/ui/card.jsx
src/components/ui/dialog.jsx
src/components/ui/input.jsx
src/components/ui/label.jsx
src/components/ui/separator.jsx
src/components/ui/skeleton.jsx
src/components/ui/textarea.jsx
src/components/WelcomeModal.js
src/config/api.js
src/context/AuthContext.js
src/context/ConfigContext.js
src/context/ModalContext.js
src/context/OnboardingContext.js
src/context/ThemeContext.js
src/services/authService.js
src/services/ConfigService.js
src/services/dashboardService.js
src/services/pageService.js
src/services/profileService.js
src/services/referralService.js
src/services/rewardsService.js
src/services/woocommerceService.js
src/utils/axiosConfig.js
src/utils/confetti.js
src/utils/haptics.js
src/utils/rankCalculations.js
tailwind.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/dashboard/ReferralCard.js">
'use client';

import Link from 'next/link';
import { motion } from 'framer-motion';
import { Card, CardContent } from "@/components/ui/card";
import { UserPlusIcon, ChevronRightIcon } from '@heroicons/react/24/outline';
import { triggerHapticFeedback } from '@/utils/haptics';
import { useConfig } from '@/context/ConfigContext';

/**
 * A dashboard card that serves as a call-to-action for the referral program.
 */
export default function ReferralCard() {
  const { settings } = useConfig();
  const bannerText = settings.brand_personality?.referral_banner_text || 'üéÅ Earn More By Inviting Your Friends';

  return (
    <Link href="/profile/refer" onClick={triggerHapticFeedback} className="block group">
      <motion.div
        whileTap={{ scale: 0.98 }}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, ease: "easeOut", delay: 0.15 }}
      >
        <Card className="bg-primary text-primary-foreground">
          <CardContent className="flex items-center p-4">
            <div className="bg-primary-foreground/20 p-3 rounded-full mr-4">
              <UserPlusIcon className="h-6 w-6" />
            </div>
            <div className="flex-grow">
              <p className="font-semibold">{bannerText}</p>
            </div>
            <ChevronRightIcon className="h-5 w-5 opacity-70 transition-transform group-hover:translate-x-1" />
          </CardContent>
        </Card>
      </motion.div>
    </Link>
  );
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".husky/pre-commit">
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx lint-staged
</file>

<file path=".prettierrc.json">
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 80,
  "tabWidth": 2,
  "plugins": ["prettier-plugin-tailwindcss"]
}
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [...compat.extends("next/core-web-vitals")];

export default eslintConfig;
</file>

<file path="jest.config.js">
// jest.config.js

const nextJest = require('next/jest')

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    // Handle module aliases (this is the important part for our @/components paths)
    '^@/components/(.*)$': '<rootDir>/src/components/$1',
    '^@/context/(.*)$': '<rootDir>/src/context/$1',
    '^@/utils/(.*)$': '<rootDir>/src/utils/$1',
  },
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig)
</file>

<file path="jest.setup.js">
// jest.setup.js

// Optional: configure or set up a testing framework before each test.
// If you delete this file, remove `setupFilesAfterEnv` from `jest.config.js`

// Used for things like:
// import '@testing-library/jest-dom/extend-expect';
import '@testing-library/jest-dom'
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/manifest.json">
{
  "name": "CannaRewards",
  "short_name": "CannaRewards",
  "description": "Scan products, earn points, and redeem exclusive rewards.",
  "start_url": "/",
  "display": "standalone",
  "orientation": "portrait",
  "background_color": "#ffffff",
  "theme_color": "#2563eb",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/robots.txt">
# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file
#
# Allow all friendly web crawlers to access all content
User-agent: *
Disallow:

# You could disallow specific pages if needed in the future, for example:
# Disallow: /profile/
# Disallow: /orders/

Sitemap: /sitemap.xml
</file>

<file path="public/sitemap.xml">
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <!-- This is a basic, static sitemap. For a larger, dynamic site,
       this file would be generated automatically by the server. -->

  <!-- Homepage -->
  <url>
    <loc>https://www.yourdomain.com/</loc>
    <lastmod>2024-01-01</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>

  <!-- How to Earn Page -->
  <url>
    <loc>https://www.yourdomain.com/how-to-earn</loc>
    <lastmod>2024-01-01</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>

  <!-- Catalog Page -->
  <url>
    <loc>https://www.yourdomain.com/catalog</loc>
    <lastmod>2024-01-01</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.9</priority>
  </url>

  <!-- Terms Page -->
  <url>
    <loc>https://www.yourdomain.com/terms</loc>
    <lastmod>2024-01-01</lastmod>
    <changefreq>yearly</changefreq>
    <priority>0.3</priority>
  </url>

  <!-- Support Page -->
  <url>
    <loc>https://www.yourdomain.com/support</loc>
    <lastmod>2024-01-01</lastmod>
    <changefreq>yearly</changefreq>
    <priority>0.3</priority>
  </url>

</urlset>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/auth/magic-login/page.js">
'use client';

import { useEffect, Suspense, useRef } from 'react'; // Import useRef
import { useSearchParams, useRouter } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';
import { validateMagicLink } from '@/services/authService';
import { showToast } from '@/components/CustomToast';

function MagicLoginProcessor() {
    const router = useRouter();
    const searchParams = useSearchParams();
    const { login } = useAuth();
    const hasProcessed = useRef(false); // Add a ref to prevent double submission

    useEffect(() => {
        // Check if we are already processing or have processed this request
        if (hasProcessed.current) {
            return;
        }

        const token = searchParams.get('token');
        
        if (token) {
            const handleValidation = async () => {
                // Set the ref to true immediately to lock this effect
                hasProcessed.current = true; 
                try {
                    // The service call will exchange our magic token for a real JWT
                    const data = await validateMagicLink(token);
                    login(data.token); // Log the user in with the new JWT
                    router.push('/'); // Redirect to the main dashboard on success
                } catch (error) {
                    showToast('error', 'Login Failed', error.message || 'The magic link is invalid or has expired.');
                    router.push('/'); // Redirect home on any failure
                }
            };
            handleValidation();
        } else {
            // If someone lands here without a token, just send them home.
            showToast('error', 'Invalid Link', 'No login token was provided.');
            router.push('/');
        }
    }, [searchParams, login, router]);

    return (
        <div className="text-center p-8">
            <h1 className="text-2xl font-bold mb-4">Validating Login Link...</h1>
            <p className="text-gray-600">Please wait a moment.</p>
        </div>
    );
}

export default function MagicLoginPage() {
    return (
        <main className="flex items-center justify-center min-h-screen bg-gray-50">
            <Suspense fallback={<div>Loading...</div>}>
                <MagicLoginProcessor />
            </Suspense>
        </main>
    );
}
</file>

<file path="src/app/catalog/[productId]/product.test.js">
import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import { useSearchParams, useParams } from 'next/navigation';
import { AuthProvider } from '@/context/AuthContext';
import { ModalProvider } from '@/context/ModalContext';
import api from '@/utils/axiosConfig';
import ProductDetailPage from './page';

// Mock dependencies
const mockUseAuth = jest.fn();
const mockUseModal = jest.fn();
const mockRouterPush = jest.fn();
const mockRouterBack = jest.fn();

jest.mock('next/navigation', () => ({
  useRouter: () => ({ push: mockRouterPush, back: mockRouterBack }),
  useSearchParams: jest.fn(),
  useParams: jest.fn(),
}));

jest.mock('@/context/AuthContext', () => ({
  ...jest.requireActual('@/context/AuthContext'),
  useAuth: () => mockUseAuth(),
}));

jest.mock('@/context/ModalContext', () => ({
  ...jest.requireActual('@/context/ModalContext'),
  useModal: () => mockUseModal(),
}));

jest.mock('@/utils/axiosConfig');

// Custom render function
const renderProductDetailPage = () => {
  return render(
    <ModalProvider>
      <AuthProvider>
        <ProductDetailPage />
      </AuthProvider>
    </ModalProvider>
  );
};

// Mock product data
const mockProduct = {
  id: 123,
  name: 'Awesome Reward Hat',
  images: [{ src: 'hat.jpg' }],
  description: 'A very cool hat for redeeming.',
  meta_data: [{ key: 'points_cost', value: '500' }],
};

describe('ProductDetailPage', () => {

  beforeEach(() => {
    jest.clearAllMocks();
    api.get.mockResolvedValue({ data: mockProduct });
  });

  // --- NEW BULLETPROOF HELPER ---
  const waitForDataToLoad = async () => {
    await waitFor(() => {
      // Wait for the skeleton to be REMOVED from the document
      expect(screen.queryByTestId('product-detail-skeleton')).not.toBeInTheDocument();
    });
  };

  it('should trigger celebration and show special UI for a first scan', async () => {
    useParams.mockReturnValue({ productId: '123' });
    useSearchParams.mockReturnValue(new URLSearchParams('?first_scan=true'));
    const mockTriggerCelebration = jest.fn();
    mockUseModal.mockReturnValue({ triggerCelebration: mockTriggerCelebration });
    mockUseAuth.mockReturnValue({ isAuthenticated: true, loading: false, user: { points: 1000 } });

    renderProductDetailPage();
    
    expect(mockTriggerCelebration).toHaveBeenCalledTimes(1);
    
    await waitForDataToLoad();

    expect(screen.getByText('Awesome Reward Hat')).toBeInTheDocument();
    expect(screen.getByText('Congratulations!')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Claim Your Welcome Gift!/i })).toBeInTheDocument();
  });

  it('should show standard redeem button when user can afford the reward', async () => {
    useParams.mockReturnValue({ productId: '123' });
    useSearchParams.mockReturnValue(new URLSearchParams(''));
    mockUseModal.mockReturnValue({ triggerCelebration: jest.fn() });
    mockUseAuth.mockReturnValue({ isAuthenticated: true, loading: false, user: { points: 600 } });

    renderProductDetailPage();
    await waitForDataToLoad();

    const redeemButton = screen.getByRole('button', { name: /Redeem for 500 Points/i });
    expect(redeemButton).toBeInTheDocument();
    expect(redeemButton).not.toBeDisabled();
  });

  it('should show a disabled button when user cannot afford the reward', async () => {
    useParams.mockReturnValue({ productId: '123' });
    useSearchParams.mockReturnValue(new URLSearchParams(''));
    mockUseModal.mockReturnValue({ triggerCelebration: jest.fn() });
    mockUseAuth.mockReturnValue({ isAuthenticated: true, loading: false, user: { points: 100 } });

    renderProductDetailPage();
    await waitForDataToLoad();

    const redeemButton = screen.getByRole('button', { name: /Earn 400 more points/i });
    expect(redeemButton).toBeInTheDocument();
    expect(redeemButton).toBeDisabled();
  });

  it('should open the shipping modal when an eligible user clicks redeem', async () => {
    useParams.mockReturnValue({ productId: '123' });
    useSearchParams.mockReturnValue(new URLSearchParams(''));
    mockUseModal.mockReturnValue({ triggerCelebration: jest.fn() });
    mockUseAuth.mockReturnValue({ isAuthenticated: true, loading: false, user: { points: 600 } });

    renderProductDetailPage();
    await waitForDataToLoad();
    
    expect(screen.queryByText('Enter Shipping Details')).not.toBeInTheDocument();

    const redeemButton = screen.getByRole('button', { name: /Redeem for 500 Points/i });
    fireEvent.click(redeemButton);

    expect(screen.getByText('Enter Shipping Details')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Save & Redeem/i })).toBeInTheDocument();
  });
});
</file>

<file path="src/app/claim/claim.test.js">
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { useSearchParams } from 'next/navigation';
import { AuthProvider } from '@/context/AuthContext';
import { ModalProvider } from '@/context/ModalContext';
import api from '@/utils/axiosConfig';
import ClaimPage from './page';

// --- A more robust way to mock modules ---
// This tells Jest to get the real module, and then we'll override specific parts.
const mockUseAuth = jest.fn();
const mockUseModal = jest.fn();

jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
  }),
  useSearchParams: jest.fn(),
  useParams: jest.fn(),
}));

jest.mock('@/context/AuthContext', () => ({
  ...jest.requireActual('@/context/AuthContext'), // Import the actual module
  useAuth: () => mockUseAuth(), // Override just the useAuth hook
}));

jest.mock('@/context/ModalContext', () => ({
  ...jest.requireActual('@/context/ModalContext'), // Import the actual module
  useModal: () => mockUseModal(), // Override just the useModal hook
}));

jest.mock('@/utils/axiosConfig');


// The custom render function uses the real providers.
const renderClaimPageWithProviders = () => {
  return render(
    <ModalProvider>
      <AuthProvider>
        <ClaimPage />
      </AuthProvider>
    </ModalProvider>
  );
};


describe('ClaimPage', () => {

  beforeEach(() => {
    // Reset mocks before each test
    mockUseAuth.mockClear();
    mockUseModal.mockClear();
    api.get.mockClear();
    api.post.mockClear();
    // Clear any localStorage mocks
    jest.restoreAllMocks();
  });

  it('should show the welcome screen for an unauthenticated user', async () => {
    // --- ARRANGE ---
    useSearchParams.mockReturnValue(new URLSearchParams('?code=VALIDCODE123'));
    
    // Set the return value for our mocked hooks for this specific test
    mockUseAuth.mockReturnValue({
      isAuthenticated: false,
      loading: false,
    });
    mockUseModal.mockReturnValue({
      triggerCelebration: jest.fn(),
    });

    const mockReward = {
      productId: 1,
      name: 'The Coolest Hat',
      image: 'hat.jpg',
    };
    api.get.mockResolvedValue({ data: mockReward });

    // --- ACT ---
    renderClaimPageWithProviders();

    // --- ASSERT ---
    await waitFor(() => {
      expect(screen.getByText("You've Unlocked a Reward!")).toBeInTheDocument();
    });

    expect(screen.getByText('The Coolest Hat')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Create Account to Claim/i })).toBeInTheDocument();
  });

  it('should claim the code directly for an authenticated user', async () => {
    // --- ARRANGE ---
    useSearchParams.mockReturnValue(new URLSearchParams('?code=AUTHENTICATEDCODE'));
    
    // --- Set up mock localStorage ---
    const fakeToken = 'fake-auth-token';
    // Use jest.spyOn for a cleaner, restorable mock
    jest.spyOn(Storage.prototype, 'getItem').mockImplementation((key) => {
      if (key === 'authToken') {
        return fakeToken;
      }
      return null;
    });

    const mockLogin = jest.fn().mockResolvedValue(true);
    const mockTriggerCelebration = jest.fn();

    mockUseAuth.mockReturnValue({
      isAuthenticated: true,
      loading: false,
      login: mockLogin,
    });
    mockUseModal.mockReturnValue({
      triggerCelebration: mockTriggerCelebration,
    });
    
    api.post.mockResolvedValue({ data: { success: true } });

    // --- ACT ---
    renderClaimPageWithProviders();

    // --- ASSERT ---
    expect(screen.getByText('Processing Your Reward...')).toBeInTheDocument();
    
    await waitFor(() => {
      expect(api.post).toHaveBeenCalledWith(
        expect.stringContaining('/rewards/v1/claim'),
        { code: 'AUTHENTICATEDCODE' }
      );
    });
    
    expect(mockLogin).toHaveBeenCalledWith(fakeToken, true);
    expect(mockTriggerCelebration).toHaveBeenCalled();
  });
});
</file>

<file path="src/app/not-found.js">
'use client';

import Link from 'next/link';
import Image from 'next/image';
import AnimatedPage from '../components/AnimatedPage';
import { ExclamationTriangleIcon } from '@heroicons/react/24/outline';

export default function NotFound() {
  return (
    <AnimatedPage>
      <main className="flex items-center justify-center min-h-screen bg-white">
        <div className="text-center p-8 w-full max-w-md">
          <div className="flex justify-center mb-6">
              <ExclamationTriangleIcon className="w-20 h-20 text-yellow-400" />
          </div>
          <h1 className="text-4xl font-bold text-gray-800 mb-2">404 - Page Not Found</h1>
          <p className="text-lg text-gray-600 mb-8">
            Sorry, the page you are looking for does not exist.
          </p>
          <Link href="/">
            <button className="bg-primary text-white font-bold py-3 px-8 rounded-lg text-lg transform hover:scale-105 transition-transform">
              Go Back Home
            </button>
          </Link>
        </div>
      </main>
    </AnimatedPage>
  );
}
</file>

<file path="src/app/profile/badges/page.js">
'use client';

import { useAuth } from '@/context/AuthContext';
import dynamic from 'next/dynamic';
import PageContainer from '@/components/PageContainer';
import DynamicHeader from '@/components/DynamicHeader';
import StaggeredList from '@/components/StaggeredList';
import { Skeleton } from "@/components/ui/skeleton";

// Dynamically import the Badge component to ensure framer-motion is client-side
const Badge = dynamic(() => import('@/components/Badge'), { 
    ssr: false,
    loading: () => <Skeleton className="w-full h-48 rounded-xl" />
});


function BadgesSkeleton() {
    return (
        <div className="grid grid-cols-2 gap-4">
            <Skeleton className="w-full h-48 rounded-xl" />
            <Skeleton className="w-full h-48 rounded-xl" />
            <Skeleton className="w-full h-48 rounded-xl" />
            <Skeleton className="w-full h-48 rounded-xl" />
        </div>
    );
}


export default function BadgesPage() {
    const { user, loading } = useAuth();

    if (loading || !user) {
        return (
            <PageContainer>
                <DynamicHeader title="Trophy Case" backLink="/profile" />
                <BadgesSkeleton />
            </PageContainer>
        );
    }

    const allAchievements = user.allAchievements ? Object.values(user.allAchievements) : [];
    const unlockedKeys = new Set(user.unlockedAchievementKeys || []);

    // Sort achievements to show unlocked ones first
    const sortedAchievements = [...allAchievements].sort((a, b) => {
        const aUnlocked = unlockedKeys.has(a.achievement_key);
        const bUnlocked = unlockedKeys.has(b.achievement_key);
        if (aUnlocked === bUnlocked) return 0;
        return aUnlocked ? -1 : 1;
    });

    return (
        <PageContainer>
            <DynamicHeader title="Trophy Case" backLink="/profile" />
            
            <p className="text-center text-muted-foreground mb-6">
                Discover and unlock achievements to earn bonus points. Tap any badge to see how to earn it.
            </p>

            {sortedAchievements.length > 0 ? (
                <StaggeredList className="grid grid-cols-2 gap-4">
                    {sortedAchievements.map(ach => (
                        <Badge 
                            key={ach.achievement_key}
                            achievement={ach}
                            isUnlocked={unlockedKeys.has(ach.achievement_key)}
                        />
                    ))}
                </StaggeredList>
            ) : (
                <div className="text-center text-muted-foreground mt-12">
                    <p>No achievements are available at this time. Check back soon!</p>
                </div>
            )}
        </PageContainer>
    );
}
</file>

<file path="src/app/settings/page.js">
'use client';

import AnimatedPage from '../../components/AnimatedPage';
import DynamicHeader from '../../components/DynamicHeader';
import { Cog6ToothIcon } from '@heroicons/react/24/outline';

export default function SettingsPage() {
    return (
        <AnimatedPage>
            <main className="p-4 bg-white min-h-screen">
                <div className="w-full max-w-md mx-auto">
                    <DynamicHeader title="Settings" />
                    
                    <div className="text-center py-10 px-4 bg-gray-50 rounded-lg mt-6">
                        <div className="flex justify-center mb-4">
                            <Cog6ToothIcon className="w-16 h-16 text-gray-300" />
                        </div>
                        <h3 className="text-xl font-semibold text-gray-800 mb-2">Coming Soon</h3>
                        <p className="text-gray-500">
                            This is where you'll be able to manage your notification preferences and other account settings.
                        </p>
                    </div>
                </div>
            </main>
        </AnimatedPage>
    );
}
</file>

<file path="src/components/AchievementUnlockedModal.js">
'use client';

import { motion } from 'framer-motion';
import { useRouter } from 'next/navigation';
import { SparklesIcon } from '@heroicons/react/24/solid';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '@/components/ui/dialog';
import { triggerHapticFeedback } from '@/utils/haptics';
import { useEffect } from 'react';
import { useModal } from '@/context/ModalContext';

export default function AchievementUnlockedModal({ details, closeModal }) {
  const router = useRouter();
  const { triggerConfetti } = useModal();

  // Trigger effects when the modal appears
  useEffect(() => {
    triggerHapticFeedback();
    triggerConfetti();
  }, [triggerConfetti]);

  if (!details || !details.key) {
    return null;
  }

  const handleViewBadges = () => {
    closeModal();
    router.push('/profile/badges');
  };

  return (
    <Dialog open={true} onOpenChange={closeModal}>
      <DialogContent className="text-center sm:max-w-md">
        <DialogHeader className="flex flex-col items-center">
          <div className="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-yellow-100 text-yellow-500">
            <SparklesIcon className="h-12 w-12" />
          </div>
          <DialogTitle className="text-2xl font-bold">
            Achievement Unlocked!
          </DialogTitle>
          <DialogDescription className="pt-2 text-lg font-semibold text-foreground">
            {details.name}
          </DialogDescription>
        </DialogHeader>

        <div className="py-4">
          <p className="text-muted-foreground">
            You've earned {details.points_reward} bonus points! You can view all
            your unlocked badges in your Trophy Case.
          </p>
        </div>

        <DialogFooter className="flex-col gap-2 sm:flex-row sm:justify-center">
          <Button onClick={closeModal} variant="secondary" className="w-full">
            Continue
          </Button>
          <Button onClick={handleViewBadges} className="w-full">
            View Trophy Case
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/components/AnimatedCounter.js">
'use client';

import { motion, useMotionValue, useTransform, animate } from 'framer-motion';
import { useEffect } from 'react';

export default function AnimatedCounter({ value }) {
    // Initialize motion value. We start it at the provided value to prevent an initial animation from 0 on page load.
    const motionValue = useMotionValue(value); 
    const rounded = useTransform(motionValue, (latest) => Math.round(latest));

    useEffect(() => {
        // This effect triggers ONLY when the 'value' prop changes.
        // It animates the motionValue from its current state to the new value.
        const controls = animate(motionValue, value, { 
            duration: 1, 
            ease: 'easeOut' 
        });

        // Cleanup function to stop the animation if the component unmounts
        return controls.stop;
    }, [value, motionValue]);

    return <motion.span>{rounded}</motion.span>;
}
</file>

<file path="src/components/Badge.js">
'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { cn } from "@/components/lib/utils";
import { LockClosedIcon, SparklesIcon } from '@heroicons/react/24/solid';

export default function Badge({ achievement, isUnlocked }) {
    const [isFlipped, setIsFlipped] = useState(false);

    const rarityStyles = {
        common: { bg: 'bg-gray-200', text: 'text-gray-800', border: 'border-gray-300' },
        uncommon: { bg: 'bg-green-200', text: 'text-green-800', border: 'border-green-300' },
        rare: { bg: 'bg-blue-200', text: 'text-blue-800', border: 'border-blue-300' },
        epic: { bg: 'bg-purple-200', text: 'text-purple-800', border: 'border-purple-300' },
        legendary: { bg: 'bg-yellow-200', text: 'text-yellow-800', border: 'border-yellow-300' },
    };

    const style = rarityStyles[achievement.rarity] || rarityStyles.common;

    const flipVariants = {
        front: { rotateY: 0 },
        back: { rotateY: 180 }
    };

    return (
        <div 
            className="w-full h-48 [perspective:1000px] cursor-pointer" 
            onClick={() => setIsFlipped(!isFlipped)}
        >
            <motion.div
                className="relative w-full h-full [transform-style:preserve-3d] transition-transform duration-700"
                variants={flipVariants}
                initial={false}
                animate={isFlipped ? "back" : "front"}
                transition={{ duration: 0.7, ease: "easeInOut" }}
            >
                {/* Front of the Badge */}
                <div className={cn(
                    "absolute w-full h-full [backface-visibility:hidden] rounded-xl border-2 flex flex-col items-center justify-center p-4 text-center",
                    isUnlocked ? `${style.bg} ${style.border}` : "bg-gray-100 border-gray-200"
                )}>
                    <div className={cn("transition-all duration-500", !isUnlocked && "grayscale opacity-50")}>
                        {achievement.icon_url ? (
                             <img src={achievement.icon_url} alt={achievement.title} className="w-16 h-16 mx-auto mb-2" />
                        ) : (
                            <SparklesIcon className={cn("w-16 h-16 mx-auto mb-2", style.text)} />
                        )}
                        <h3 className={cn("font-bold", style.text)}>{achievement.title}</h3>
                        <p className={cn("text-xs capitalize", style.text, "opacity-70")}>{achievement.rarity}</p>
                    </div>
                     {!isUnlocked && <LockClosedIcon className="w-5 h-5 text-gray-400 absolute top-3 right-3" />}
                </div>

                {/* Back of the Badge */}
                <div className={cn(
                    "absolute w-full h-full [transform:rotateY(180deg)] [backface-visibility:hidden] rounded-xl border-2 flex flex-col justify-center p-4",
                     style.bg, style.border
                )}>
                    <p className={cn("text-sm text-center", style.text)}>{achievement.description}</p>
                </div>
            </motion.div>
        </div>
    );
}
</file>

<file path="src/components/ConfettiBlast.js">
'use client';

import { useEffect, useRef } from 'react';
import confetti from 'canvas-confetti';

export default function ConfettiBlast() {
    // useRef to ensure confetti only fires once per mount, not on re-renders
    const fired = useRef(false);

    useEffect(() => {
        if (!fired.current) {
            const duration = 3 * 1000; // 3 seconds
            const animationEnd = Date.now() + duration;
            const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 999 }; // High zIndex

            function randomInRange(min, max) {
                return Math.random() * (max - min) + min;
            }

            const interval = setInterval(() => {
                const timeLeft = animationEnd - Date.now();
                if (timeLeft <= 0) {
                    return clearInterval(interval);
                }
                const particleCount = 50 * (timeLeft / duration);
                confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } });
                confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } });
            }, 250);

            fired.current = true;
        }
    }, []); // Empty dependency array ensures this runs only once when the component mounts

    // This component renders nothing itself
    return null;
}
</file>

<file path="src/components/CustomToast.js">
'use client';

import toast from 'react-hot-toast';
import { motion } from 'framer-motion';
import { CheckCircleIcon, XCircleIcon, InformationCircleIcon } from '@heroicons/react/24/solid';

// This is the visual component for the toast
function CustomToast({ t, icon, title, message }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="max-w-md w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5"
    >
      <div className="flex-1 w-0 p-4">
        <div className="flex items-start">
          <div className="flex-shrink-0 pt-0.5">
            {icon}
          </div>
          <div className="ml-3 flex-1">
            <p className="text-sm font-medium text-gray-900">{title}</p>
            <p className="mt-1 text-sm text-gray-500">{message}</p>
          </div>
        </div>
      </div>
      <div className="flex border-l border-gray-200">
        <button
          onClick={() => toast.dismiss(t.id)}
          className="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-primary hover:text-indigo-500 focus:outline-none focus:ring-2 focus:ring-primary"
        >
          Close
        </button>
      </div>
    </motion.div>
  );
}

// This is our helper function to easily show different types of toasts
export const showToast = (type, title, message) => {
  let icon;
  switch (type) {
    case 'success':
      icon = <CheckCircleIcon className="h-6 w-6 text-green-500" aria-hidden="true" />;
      break;
    case 'error':
      icon = <XCircleIcon className="h-6 w-6 text-red-500" aria-hidden="true" />;
      break;
    default:
      icon = <InformationCircleIcon className="h-6 w-6 text-blue-500" aria-hidden="true" />;
      break;
  }

  toast.custom((t) => (
    <CustomToast t={t} icon={icon} title={title} message={message} />
  ), {
    position: 'top-center',
    duration: 4000,
  });
};
</file>

<file path="src/components/dashboard/ActionCard.js">
'use client';

import Link from 'next/link';
import { motion } from 'framer-motion';
import { Card, CardContent } from "@/components/ui/card";
import { QrCodeIcon, CircleStackIcon, ChevronRightIcon } from '@heroicons/react/24/outline';
import { triggerHapticFeedback } from '@/utils/haptics';

/**
 * A dashboard card that provides clear, large-format buttons for the app's primary actions.
 */
export default function ActionCard() {

  // A reusable sub-component for each action item to keep the code DRY.
  const ActionButton = ({ href, icon: Icon, title, description }) => (
    <Link href={href} onClick={triggerHapticFeedback} className="block group">
      <motion.div whileTap={{ scale: 0.98, backgroundColor: 'hsl(var(--muted))' }}>
        <div className="flex items-center p-4 rounded-lg transition-colors group-hover:bg-muted">
          <div className="bg-secondary p-3 rounded-full mr-4">
            <Icon className="h-6 w-6 text-secondary-foreground" />
          </div>
          <div className="flex-grow">
            <p className="font-semibold text-card-foreground">{title}</p>
            <p className="text-sm text-muted-foreground">{description}</p>
          </div>
          <ChevronRightIcon className="h-5 w-5 text-muted-foreground/50 transition-transform group-hover:translate-x-1" />
        </div>
      </motion.div>
    </Link>
  );

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      // Apply a slight delay so it animates in after the StatusCard
      transition={{ duration: 0.5, ease: "easeOut", delay: 0.1 }}
    >
      <Card>
        <CardContent className="p-2 space-y-1">
          <ActionButton
            href="/scan"
            icon={QrCodeIcon}
            title="Scan Product"
            description="Earn points by scanning new items."
          />
          <ActionButton
            href="/catalog"
            icon={CircleStackIcon}
            title="Browse Rewards"
            description="See all the rewards you can redeem."
          />
        </CardContent>
      </Card>
    </motion.div>
  );
}
</file>

<file path="src/components/dashboard/NewRewardsCard.js">
'use client';

import { useEffect } from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { GiftIcon } from '@heroicons/react/24/solid';
import { Button } from '@/components/ui/button';
import { triggerHapticFeedback } from '@/utils/haptics';

export default function NewRewardsCard({ count, allRewardIds }) {
  // This effect runs when the component mounts, "clearing" the notification
  // by updating the list of seen rewards in local storage.
  useEffect(() => {
    localStorage.setItem('seenRewardIds', JSON.stringify(allRewardIds));
  }, [allRewardIds]);

  return (
    <motion.div
      className="relative flex flex-col justify-center items-center text-center w-full h-full p-8 text-white"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.5, ease: 'easeOut' }}
    >
      <div className="relative z-10">
        <div className="mb-6">
          <GiftIcon className="w-16 h-16 mx-auto text-yellow-300" />
        </div>
        <h1 className="text-4xl font-bold mb-2">Fresh Drops!</h1>
        <p className="text-lg text-white/80 mb-8">
          {count} new reward{count > 1 ? 's are' : ' is'} waiting for you in the catalog.
        </p>
        <Link href="/catalog" onClick={triggerHapticFeedback}>
          <Button size="lg" className="bg-white text-black hover:bg-white/90 h-14 text-lg w-full">
            Check Them Out
          </Button>
        </Link>
      </div>
    </motion.div>
  );
}
</file>

<file path="src/components/dashboard/NextActionCarousel.js">
'use client';

import { useMemo } from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { Card, CardContent } from "@/components/ui/card";
import ImageWithLoader from '../ImageWithLoader';
import { ArrowUpRightIcon, GiftIcon, FireIcon } from '@heroicons/react/24/solid';
import { triggerHapticFeedback } from '@/utils/haptics';

/**
 * A horizontal carousel of smart, contextual action cards for the dashboard.
 * @param {object} props
 * @param {object} props.user - The authenticated user object from AuthContext.
 */
export default function NextActionCarousel({ user }) {

  // Calculate the user's next best reward using useMemo for efficiency.
  const nextBestReward = useMemo(() => {
    if (!user || !user.eligibleRewards || user.points === undefined) return null;
    let bestCandidate = null;
    let smallestDifference = Infinity;
    user.eligibleRewards.forEach(reward => {
      if (reward.points_cost > user.points) {
        const difference = reward.points_cost - user.points;
        if (difference < smallestDifference) {
          smallestDifference = difference;
          bestCandidate = reward;
        }
      }
    });
    return bestCandidate ? { ...bestCandidate, pointsNeeded: smallestDifference } : null;
  }, [user]);

  // Build the list of actions to display based on user data.
  const actions = useMemo(() => {
    const availableActions = [];
    
    // Action 1: New Rewards
    if (user.newRewardsCount > 0) {
      availableActions.push({
        type: 'new_rewards',
        title: `${user.newRewardsCount} New Reward${user.newRewardsCount > 1 ? 's' : ''}`,
        subtitle: 'Recently added to the catalog',
        href: '/catalog',
        icon: FireIcon,
      });
    }

    // Action 2: Next Best Reward
    if (nextBestReward) {
      availableActions.push({
        type: 'next_best',
        title: nextBestReward.name,
        subtitle: `Only ${nextBestReward.pointsNeeded.toLocaleString()} points away!`,
        href: `/catalog/${nextBestReward.id}`,
        icon: GiftIcon,
        image: nextBestReward.images?.[0]?.src
      });
    }

    // Action 3: Scan Streak (assuming this will be added to the user object)
    if (user.scan_streak > 1) {
       availableActions.push({
        type: 'streak',
        title: `${user.scan_streak} Scan Streak!`,
        subtitle: `Your next scan gets a bonus`,
        href: '/scan',
        icon: ArrowUpRightIcon,
      });
    }

    return availableActions;
  }, [user, nextBestReward]);


  // If there are no relevant actions, don't render anything.
  if (actions.length === 0) {
    return null;
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, ease: "easeOut", delay: 0.2 }}
    >
      <h2 className="text-lg font-semibold text-foreground mb-3 px-1">What's Next?</h2>
      <div className="flex gap-4 overflow-x-auto pb-4 -mb-4" style={{ scrollbarWidth: 'none', '-ms-overflow-style': 'none' }}>
        {actions.map((action, index) => (
          <Link href={action.href} key={index} onClick={triggerHapticFeedback} className="block flex-shrink-0 w-3/4 sm:w-1/2">
            <motion.div whileTap={{ scale: 0.98 }}>
              <Card className="overflow-hidden h-full group transition-shadow hover:shadow-lg">
                <CardContent className="p-4">
                  {action.image ? (
                    <div className="flex items-center space-x-4">
                        <div className="w-16 h-16 rounded-lg overflow-hidden border">
                            <ImageWithLoader src={action.image} alt={action.title} className="w-full h-full object-cover" />
                        </div>
                        <div className="flex-1">
                            <p className="font-semibold text-card-foreground leading-tight">{action.title}</p>
                            <p className="text-sm text-yellow-500 font-bold">{action.subtitle}</p>
                        </div>
                    </div>
                  ) : (
                    <div className="flex items-center">
                      <div className="mr-4"><action.icon className="h-6 w-6 text-primary" /></div>
                      <div>
                        <p className="font-semibold text-card-foreground">{action.title}</p>
                        <p className="text-sm text-muted-foreground">{action.subtitle}</p>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          </Link>
        ))}
        {/* Empty div for scroll spacing */}
        <div className="flex-shrink-0 w-1"></div>
      </div>
    </motion.div>
  );
}
</file>

<file path="src/components/dashboard/NextBestRewardCard.js">
'use client';

import Link from 'next/link';
import { motion } from 'framer-motion';
import ImageWithLoader from '@/components/ImageWithLoader';
import { Button } from '@/components/ui/button';
import { triggerHapticFeedback } from '@/utils/haptics';
import { Badge } from '@/components/ui/badge';

export default function NextBestRewardCard({ reward, pointsNeeded }) {
  const imageUrl = reward.images?.[0]?.src || 'https://via.placeholder.com/300';

  return (
    <motion.div
      className="relative flex flex-col justify-between w-full h-full p-8 text-white text-center"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.5, ease: 'easeOut' }}
    >
      {/* Top Section for motivation */}
      <div className="relative z-10">
        <Badge variant="secondary" className="bg-white/10 text-white backdrop-blur-sm">
          You're So Close!
        </Badge>
      </div>

      {/* Middle Section for the Reward */}
      <div className="relative z-10 flex flex-col items-center flex-grow justify-center my-6">
        <div className="w-48 h-48 rounded-full overflow-hidden border-4 border-white/20 shadow-lg mb-4">
          <ImageWithLoader src={imageUrl} alt={reward.name} className="w-full h-full object-cover" />
        </div>
        <h2 className="text-4xl font-bold tracking-tight">{reward.name}</h2>
        <p className="font-bold text-xl mt-2 text-yellow-300">
          Only {pointsNeeded.toLocaleString()} points away!
        </p>
      </div>

      {/* Bottom Section for the CTA */}
      <div className="relative z-10">
        <Link href={`/catalog/${reward.id}`} onClick={triggerHapticFeedback}>
          <Button size="lg" className="bg-white text-black hover:bg-white/90 h-14 text-lg w-full shadow-lg">
            View Reward
          </Button>
        </Link>
      </div>
    </motion.div>
  );
}
</file>

<file path="src/components/dashboard/StatusCard.js">
'use client';

import Link from 'next/link';
import { motion } from 'framer-motion';
import AnimatedCounter from '../AnimatedCounter';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ChevronRightIcon } from '@heroicons/react/24/solid';

/**
 * The primary "hero" card for the dashboard.
 * Displays the user's name, rank, and animated points total.
 * @param {object} props
 * @param {object} props.user - The authenticated user object from AuthContext.
 */
export default function StatusCard({ user }) {
  if (!user) {
    // Render a skeleton or null if user data isn't ready
    return (
        <Card className="animate-pulse">
            <CardHeader><div className="h-8 bg-muted rounded w-3/4"></div><div className="h-4 bg-muted rounded w-1/2"></div></CardHeader>
            <CardContent><div className="h-16 bg-muted rounded w-1/2 mx-auto"></div></CardContent>
            <CardFooter><div className="h-6 bg-muted rounded w-1/4 ml-auto"></div></CardFooter>
        </Card>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, ease: "easeOut" }}
    >
      <Card className="overflow-hidden">
        <CardHeader>
          <CardTitle className="text-2xl font-bold tracking-tight capitalize">
            Welcome, {user.firstName || 'Member'}
          </CardTitle>
          <CardDescription>{user.rank.name || 'Member'} Tier</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-4">
            <span className="text-6xl font-bold text-primary tracking-tighter">
              {/* --- FIX: Use the correct 'points_balance' key --- */}
              <AnimatedCounter value={user.points_balance || 0} />
            </span>
            <p className="text-sm text-muted-foreground mt-1">Total Points</p>
          </div>
        </CardContent>
        <CardFooter className="bg-secondary/50 p-3">
          <Link href="/how-to-earn" className="w-full">
            <Button variant="link" size="sm" className="w-full text-secondary-foreground/80">
              View All Ranks & Benefits
              <ChevronRightIcon className="h-4 w-4 ml-1" />
            </Button>
          </Link>
        </CardFooter>
      </Card>
    </motion.div>
  );
}
</file>

<file path="src/components/FloatingOnboardingBanner.js">
'use client';

import { useOnboarding } from '@/context/OnboardingContext';
import { useModal } from '@/context/ModalContext'; // Import useModal hook
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter } from 'next/navigation'; // Import useRouter
import Link from 'next/link';
import { ArrowRightIcon, SparklesIcon } from '@heroicons/react/24/solid';
import { triggerHapticFeedback } from '@/utils/haptics';

export default function FloatingOnboardingBanner() {
    const quest = useOnboarding();
    const { openEditProfileModal } = useModal(); // Get the modal function
    const router = useRouter(); // Get the router

    const bannerVariants = {
        hidden: { y: 150, opacity: 0 },
        visible: { y: 0, opacity: 1, transition: { type: 'spring', stiffness: 100, damping: 20, delay: 0.5 } },
        exit: { y: 150, opacity: 0, transition: { duration: 0.3 } }
    };

    const handleClick = (e) => {
        triggerHapticFeedback();
        if (quest.ctaLink === 'OPEN_EDIT_PROFILE_MODAL') {
            e.preventDefault(); // Prevent any default link behavior
            openEditProfileModal();
        } else {
            router.push(quest.ctaLink); // Use router for standard navigation
        }
    };

    // The outer element will now be a div that we can attach an onClick to,
    // instead of relying solely on the Link component.
    const BannerContent = () => (
        <div className="flex items-center gap-4 p-4 bg-primary text-primary-foreground rounded-xl shadow-lg border-2 border-white/20">
            <SparklesIcon className="w-8 h-8 text-yellow-300 flex-shrink-0" />
            <div className="flex-grow">
                <p className="font-bold text-sm leading-tight">Next Quest:</p>
                <p className="text-sm leading-tight">{quest.message}</p>
            </div>
            <div className="flex items-center justify-center w-12 h-12 bg-white/20 rounded-full flex-shrink-0 transition-transform group-hover:scale-110">
                <ArrowRightIcon className="w-6 h-6" />
            </div>
        </div>
    );


    return (
        <AnimatePresence>
            {quest && quest.show && (
                <motion.div
                    key="onboarding-banner"
                    variants={bannerVariants}
                    initial="hidden"
                    animate="visible"
                    exit="exit"
                    className="fixed bottom-20 left-4 right-4 z-40"
                    style={{ paddingBottom: 'env(safe-area-inset-bottom)' }}
                >
                    <div className="w-full max-w-md mx-auto">
                        <div onClick={handleClick} className="block group cursor-pointer">
                            <BannerContent />
                        </div>
                    </div>
                </motion.div>
            )}
        </AnimatePresence>
    );
}
</file>

<file path="src/components/ImageWithLoader.js">
'use client';

import { useState, useEffect } from 'react';

export default function ImageWithLoader({ src, alt, className }) {
    const [isLoaded, setIsLoaded] = useState(false);

    useEffect(() => {
        // Reset loaded state if the image source changes
        setIsLoaded(false);
    }, [src]);

    return (
        <div className="relative w-full h-full">
            {/* The actual image, hidden until loaded */}
            <img
                src={src}
                alt={alt}
                className={`
                    ${className} 
                    transition-opacity duration-500 ease-in-out
                    ${isLoaded ? 'opacity-100' : 'opacity-0'}
                `}
                onLoad={() => setIsLoaded(true)}
                // In case the image fails to load, we still want to show the placeholder
                onError={() => setIsLoaded(true)} 
            />
            {/* The placeholder, visible until the image is loaded */}
            {!isLoaded && (
                <div className="absolute inset-0 bg-gray-200 animate-pulse"></div>
            )}
        </div>
    );
}
</file>

<file path="src/components/lib/utils.js">
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}
</file>

<file path="src/components/NudgeOptionsModal.js">
'use client';

import { motion } from 'framer-motion';
import { ShareIcon } from '@heroicons/react/24/outline';
import { Button } from '@/components/ui/button';
import {
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { showToast } from './CustomToast';
import { triggerHapticFeedback } from '@/utils/haptics';

export default function NudgeOptionsModal({ options, closeModal }) {
  
  const handleShare = async (text) => {
    triggerHapticFeedback();
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'A Reminder from a Friend',
          text: text,
        });
        showToast('success', 'Shared!', 'Your reminder has been sent.');
      } catch (error) {
        // This can happen if the user closes the share sheet
        console.log('Share cancelled', error);
      }
    } else {
      // Fallback for desktop browsers
      navigator.clipboard.writeText(text);
      showToast('success', 'Copied to Clipboard', 'Message ready to be pasted.');
    }
    closeModal();
  };

  return (
    <DialogContent>
      <DialogHeader>
        <DialogTitle>Choose a Message</DialogTitle>
        <DialogDescription>
          Select a friendly reminder to send. It will open in your device's share menu.
        </DialogDescription>
      </DialogHeader>
      <div className="space-y-3 pt-4">
        {options.map((text, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 15 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <button
              onClick={() => handleShare(text)}
              className="w-full text-left p-4 rounded-lg bg-secondary hover:bg-muted transition-colors text-sm text-secondary-foreground"
            >
              <p>{text}</p>
            </button>
          </motion.div>
        ))}
      </div>
    </DialogContent>
  );
}
</file>

<file path="src/components/ReferralSkeleton.js">
// src/components/ReferralSkeleton.js
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent } from "@/components/ui/card";

export default function ReferralSkeleton() {
    return (
        <Card>
            <CardContent className="p-4 flex items-center justify-between">
                <div className="flex-1 space-y-2">
                    <Skeleton className="h-5 w-32" />
                    <Skeleton className="h-4 w-48" />
                </div>
                <div className="flex items-center ml-4 space-x-2">
                    <Skeleton className="h-6 w-24 rounded-full" />
                    <Skeleton className="h-8 w-8 rounded-md" />
                </div>
            </CardContent>
        </Card>
    );
}
</file>

<file path="src/components/RegisterForm.test.js">
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { AuthProvider } from '@/context/AuthContext';
import { ModalProvider } from '@/context/ModalContext';
import RegisterForm from './RegisterForm';
import api from '@/utils/axiosConfig';

// Mock dependencies
const mockRouterPush = jest.fn();
const mockLogin = jest.fn();

jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: mockRouterPush,
  }),
}));

// We only need to mock useAuth for the login call, so we do it simply.
jest.mock('@/context/AuthContext', () => ({
  ...jest.requireActual('@/context/AuthContext'),
  useAuth: () => ({
    login: mockLogin,
  }),
}));

jest.mock('@/utils/axiosConfig');

const renderRegisterForm = (props) => {
  return render(
    // We don't need the full provider suite if we mock useAuth this way
    <RegisterForm {...props} />
  );
};

// Mock data for the incentivized flow
const mockRewardPreview = {
  productId: 1,
  name: 'Incentive Reward',
  image: 'incentive.jpg',
};

describe('RegisterForm', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    // Mock a successful API response for login and register
    api.post.mockResolvedValue({ data: { token: 'new-fake-token' } });
  });

  // Test Case 1: Standard Mode
  it('should render the standard form and not show a reward preview', () => {
    const mockSwitch = jest.fn();
    renderRegisterForm({ onSwitchToLogin: mockSwitch });

    expect(screen.getByRole('heading', { name: /Create Account/i })).toBeInTheDocument();
    // Verify the reward preview is NOT there
    expect(screen.queryByText('YOUR WELCOME REWARD')).not.toBeInTheDocument();
    // Verify the "switch to login" button is there
    expect(screen.getByRole('button', { name: /Log In/i })).toBeInTheDocument();
  });

  // Test Case 2: Incentivized Mode
  it('should render with a reward preview and hide the switch to login button', () => {
    renderRegisterForm({ claimCode: 'SCAN123', rewardPreview: mockRewardPreview });
    
    expect(screen.getByText('YOUR WELCOME REWARD')).toBeInTheDocument();
    expect(screen.getByText('Incentive Reward')).toBeInTheDocument();
    expect(screen.queryByRole('button', { name: /Log In/i })).not.toBeInTheDocument();
  });

  // Test Case 3: Successful Submission in Incentivized Mode
  it('should submit with the claimCode and redirect to the product page', async () => {
    renderRegisterForm({ claimCode: 'SCAN123', rewardPreview: mockRewardPreview });

    // Fill out the form
    fireEvent.change(screen.getByPlaceholderText('First Name'), { target: { value: 'Test' } });
    fireEvent.change(screen.getByPlaceholderText('Last Name'), { target: { value: 'User' } });
    fireEvent.change(screen.getByPlaceholderText('Email Address'), { target: { value: 'test@example.com' } });
    fireEvent.change(screen.getByPlaceholderText('Password'), { target: { value: 'password123' } });
    fireEvent.change(screen.getByPlaceholderText('Phone Number'), { target: { value: '1234567890' } });
    fireEvent.click(screen.getByLabelText(/I agree to the/i));

    // Submit the form
    fireEvent.click(screen.getByRole('button', { name: /Sign Up & Claim Reward/i }));

    // Wait for the async submission to complete
    await waitFor(() => {
      // 1. Verify the register endpoint was called with the correct payload, including the code
      expect(api.post).toHaveBeenCalledWith(
        expect.stringContaining('/rewards/v1/register'),
        expect.objectContaining({
          email: 'test@example.com',
          firstName: 'Test',
          code: 'SCAN123', // <-- The important part
        }),
        expect.any(Object)
      );
    });

    // 2. Verify the login function was called
    expect(mockLogin).toHaveBeenCalledWith('new-fake-token');

    // 3. Verify the redirect was to the correct product page with the special flag
    expect(mockRouterPush).toHaveBeenCalledWith('/catalog/1?first_scan=true');
  });
});
</file>

<file path="src/components/ReportFailedScanModal.js">
'use client';

import { useState } from 'react';
import { showToast } from './CustomToast';

// Shadcn UI Components
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea"; // Our new component
import {
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

// NOTE: In a real implementation, this would call a service function.
// For now, we'll simulate the API call.
const reportFailedScan = async (code, comments) => {
    console.log("Reporting failed scan for code:", code, "Comments:", comments);
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    // For now, we just resolve successfully. In the future, this would hit the API.
    return { success: true };
};

export default function ReportFailedScanModal({ failedCode, closeModal }) {
  const [comments, setComments] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await reportFailedScan(failedCode, comments);
      showToast('success', 'Report Sent', 'Thank you for your feedback. We will investigate this issue.');
      closeModal();
    } catch (err) {
      showToast('error', 'Submission Failed', err.message || 'Could not send report. Please try again later.');
      setLoading(false);
    }
  };

  return (
    <DialogContent className="sm:max-w-[425px]">
      <DialogHeader>
        <DialogTitle>Report a Problem</DialogTitle>
        <DialogDescription>
          Sorry you had trouble scanning. Please provide any details below so we can investigate.
        </DialogDescription>
      </DialogHeader>
      <form id="report-scan-form" onSubmit={handleSubmit} className="space-y-4 py-4">
        <div className="space-y-2">
          <Label htmlFor="failedCode">Problematic Code</Label>
          <Input id="failedCode" value={failedCode || 'N/A'} readOnly disabled />
        </div>
        <div className="space-y-2">
          <Label htmlFor="comments">Comments (Optional)</Label>
          <Textarea 
            id="comments"
            placeholder="e.g., The code was scratched, it's a new product, etc."
            value={comments}
            onChange={(e) => setComments(e.target.value)}
          />
        </div>
      </form>
      <DialogFooter>
        <Button variant="outline" onClick={closeModal}>Cancel</Button>
        <Button type="submit" form="report-scan-form" disabled={loading}>
          {loading ? 'Submitting...' : 'Submit Report'}
        </Button>
      </DialogFooter>
    </DialogContent>
  );
}
</file>

<file path="src/components/SkeletonCard.js">
// src/components/SkeletonCard.js
export default function SkeletonCard() {
    return (
        <div className="bg-gray-200 rounded-md p-4 w-full mx-auto">
            <div className="animate-pulse flex space-x-4">
                <div className="rounded-full bg-gray-300 h-10 w-10"></div>
                <div className="flex-1 space-y-6 py-1">
                    <div className="h-2 bg-gray-300 rounded"></div>
                    <div className="space-y-3">
                        <div className="grid grid-cols-3 gap-4">
                            <div className="h-2 bg-gray-300 rounded col-span-2"></div>
                            <div className="h-2 bg-gray-300 rounded col-span-1"></div>
                        </div>
                        <div className="h-2 bg-gray-300 rounded"></div>
                    </div>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="src/components/StaggeredList.js">
'use client';

import React from 'react';
import { motion } from 'framer-motion';

// Defines the animation for the container. It's mainly used for the staggerChildren property.
const containerVariants = {
  hidden: { opacity: 1 }, // The container itself doesn't fade, just its children.
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.07, // The delay between each child's animation.
    },
  },
};

// Defines the animation for each individual child item in the list.
const itemVariants = {
  hidden: { y: 20, opacity: 0 }, // Starts 20px down and invisible.
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      type: 'spring', // A spring animation for a more natural feel.
      stiffness: 100,
    },
  },
};

/**
 * A reusable component that animates its children with a staggered effect.
 * It automatically wraps each child in a motion.div for animation.
 * @param {object} props
 * @param {React.ReactNode} props.children - The list items to animate.
 * @param {string} [props.className] - Optional classes for the container.
 */
export default function StaggeredList({ children, className, ...props }) {
  return (
    <motion.div
      className={className}
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      {...props} // Pass through any other props, like `key`.
    >
      {/* 
        We use React.Children.map to iterate over the children.
        This is more robust than a simple array map.
        Each child is wrapped in its own motion.div with the item variants.
      */}
      {React.Children.map(children, (child) => (
        <motion.div variants={itemVariants}>
          {child}
        </motion.div>
      ))}
    </motion.div>
  );
}
</file>

<file path="src/components/ui/aspect-ratio.jsx">
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/badge.jsx">
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/components/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  ...props
}) {
  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/card.jsx">
import * as React from "react"

import { cn } from "@/components/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/input.jsx">
import * as React from "react"

import { cn } from "@/components/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.jsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/components/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/separator.jsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/components/lib/utils"

const Separator = React.forwardRef((
  { className, orientation = "horizontal", decorative = true, ...props },
  ref
) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props} />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/skeleton.jsx">
import { cn } from "@/components/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (<div className={cn("animate-pulse rounded-md bg-muted", className)} {...props} />);
}

export { Skeleton }
</file>

<file path="src/components/ui/textarea.jsx">
import * as React from "react"

import { cn } from "@/components/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/config/api.js">
// src/config/api.js
const API_BASE_URL = `${process.env.NEXT_PUBLIC_API_URL`/wp-json/wc/v3';

export { API_BASE_URL };
</file>

<file path="src/context/ConfigContext.js">
'use client';

import {
  createContext,
  useState,
  useContext,
  useEffect,
  useCallback,
} from 'react';
import { getAppConfig } from '../services/ConfigService';
import { useAuth } from './AuthContext';

const ConfigContext = createContext();

export function ConfigProvider({ children }) {
  const [config, setConfig] = useState(null);
  const [loading, setLoading] = useState(true);
  const { isAuthenticated } = useAuth();

  const fetchConfigData = useCallback(async () => {
    // Only fetch if the user is authenticated and we don't have config yet.
    if (isAuthenticated && !config) {
      setLoading(true);
      try {
        const configData = await getAppConfig();
        setConfig(configData);
      } catch (error) {
        console.error('ConfigContext Error:', error.message);
        // Handle error, maybe show a global error message
      } finally {
        setLoading(false);
      }
    } else if (!isAuthenticated) {
      // If user logs out, clear the config
      setConfig(null);
      setLoading(false);
    }
  }, [isAuthenticated, config]);

  useEffect(() => {
    fetchConfigData();
  }, [fetchConfigData]);

  const value = {
    config,
    loading,
    // Exposing all_ranks and all_achievements for easier access in components
    allRanks: config?.all_ranks || {},
    allAchievements: config?.all_achievements || {},
    settings: config?.settings || {},
  };

  return (
    <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>
  );
}

export function useConfig() {
  return useContext(ConfigContext);
}
</file>

<file path="src/services/ConfigService.js">
import api from '@/utils/axiosConfig';

/**
 * Fetches the global application configuration data.
 * This data is static per session and should be cached.
 * @returns {Promise<object>} The application configuration object.
 */
export const getAppConfig = async () => {
  const API_BASE_V2 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v2`;
  try {
    const response = await api.get(`${API_BASE_V2}/app/config`);
    return response.data;
  } catch (error) {
    throw new Error('Could not load application configuration.');
  }
};
</file>

<file path="src/services/dashboardService.js">
import api from '@/utils/axiosConfig';

/**
 * Fetches the dynamic data needed for the user dashboard.
 * @returns {Promise<object>} The dashboard data object.
 */
export const getDashboardData = async () => {
  const API_BASE_V2 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v2`;
  try {
    const response = await api.get(`${API_BASE_V2}/users/me/dashboard`);
    return response.data;
  } catch (error) {
    throw new Error('Could not load dashboard data.');
  }
};
</file>

<file path="src/services/profileService.js">
import api from '@/utils/axiosConfig';

const API_BASE_V2 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v2`;

/**
 * Fetches the full, detailed user profile data.
 * @returns {Promise<object>} The user's complete profile object.
 */
export const getProfileData = async () => {
  try {
    const response = await api.get(`${API_BASE_V2}/users/me/profile`);
    return response.data;
  } catch (error) {
    throw new Error('Could not fetch your profile data.');
  }
};

/**
 * Updates the user's profile data.
 * @param {object} profileData The data to update.
 * @returns {Promise<object>} The updated user profile object.
 */
export const updateProfileData = async (profileData) => {
  try {
    const response = await api.post(
      `${API_BASE_V2}/users/me/profile`,
      profileData
    );
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message || 'Failed to update your profile.'
    );
  }
};
</file>

<file path="src/utils/axiosConfig.js">
import axios from 'axios';
import NProgress from 'nprogress';

// Create a new Axios instance
const api = axios.create({
    // We can set the base URL here if we want, but it's already in our env
    // baseURL: process.env.NEXT_PUBLIC_API_URL, 
});

// --- Request Interceptor ---
// This runs BEFORE any request is sent
api.interceptors.request.use(
    (config) => {
        // Start the loading bar
        NProgress.start();
        return config;
    },
    (error) => {
        // If there's an error in the request setup, stop the loading bar
        NProgress.done();
        return Promise.reject(error);
    }
);

// --- Response Interceptor ---
// This runs AFTER a response is received
api.interceptors.response.use(
    (response) => {
        // Stop the loading bar on a successful response
        NProgress.done();
        return response;
    },
    (error) => {
        // Stop the loading bar on a failed response
        NProgress.done();
        return Promise.reject(error);
    }
);

export default api;
</file>

<file path="src/utils/confetti.js">
import confetti from 'canvas-confetti';

export const triggerConfetti = () => {
    // Basic burst from the center
    confetti({
        particleCount: 150,
        spread: 70,
        origin: { y: 0.6 }
    });

    // A more dramatic, "fireworks" style burst
    const duration = 3 * 1000; // 3 seconds
    const animationEnd = Date.now() + duration;
    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

    function randomInRange(min, max) {
        return Math.random() * (max - min) + min;
    }

    const interval = setInterval(function() {
        const timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
            return clearInterval(interval);
        }

        const particleCount = 50 * (timeLeft / duration);
        // since particles fall down, start a bit higher than random
        confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } });
        confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } });
    }, 250);
};
</file>

<file path="src/utils/haptics.js">
// A simple utility to trigger haptic feedback if the browser supports it.
export const triggerHapticFeedback = () => {
    // Check if the Vibration API is supported by the browser and enabled on the device.
    if (window.navigator && window.navigator.vibrate) {
        // A short, sharp vibration is good for confirmation.
        // The value is in milliseconds.
        window.navigator.vibrate(100);
    }
};
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/components/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/components/lib",
    "hooks": "@/components/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="next.config.mjs">
import bundleAnalyzer from '@next/bundle-analyzer';

// Initialize the analyzer with an environment variable flag
const withBundleAnalyzer = bundleAnalyzer({
  enabled: process.env.ANALYZE === 'true',
});

/** @type {import('next').NextConfig} */
const nextConfig = {
  // Your regular Next.js config goes here
  // For example:
  // images: { ... }
};

export default withBundleAnalyzer(nextConfig);
</file>

<file path="README.md">
---

#### **File 2: `cannarewards-pwa/README.md` (Updated File)**

**ACTION:** Replace the entire contents of your existing `README.md` file in the **root** directory of your `cannarewards-pwa` project.

**CONTENTS:**

````markdown
# CannaRewards PWA

## üöÄ Overview

This is the Next.js Progressive Web App (PWA) frontend for the CannaRewards D2C Intelligence Platform. It is a fully decoupled, client-side application that communicates with the CannaRewards Engine backend via a REST API.

## üìã Prerequisites

- Node.js >= 18
- `npm` or `yarn`
- A running instance of the `cannarewards-engine` backend.

## ‚öôÔ∏è Local Development Setup

1.  **Clone the repository:**

    ```bash
    git clone [your-repo-url] cannarewards-pwa
    ```

2.  **Install dependencies:**
    Navigate into the project directory.

    ```bash
    cd cannarewards-pwa
    npm install
    ```

3.  **Configure Environment Variables:**
    Copy the example environment file to create your local configuration.

    ```bash
    cp .env.local.example .env.local
    ```

    Now, open `.env.local` and fill in the required values, particularly `NEXT_PUBLIC_API_URL`, which should point to your local WordPress backend (e.g., `http://cannarewards-api.local`).

4.  **Run the development server:**
    ```bash
    npm run dev
    ```
    Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## üèóÔ∏è Architecture

This project follows a component-driven architecture, designed for rapid iteration and a high-quality user experience.

- **`/app`**: The main routing structure, following the Next.js App Router convention.
- **`/components`**: The UI library, organized by type:
  - `/ui`: Raw, primitive components from shadcn/ui.
  - `/`: Core, reusable components (`PageContainer`, `AnimatedCounter`).
  - `/[feature]`: Complex feature components (`dashboard/StatusCard`).
- **`/context`**: Global state management using React Context (`AuthContext`, `ConfigContext`).
- **`/services`**: The data layer. All API calls to the backend are isolated in these files.
- **Storybook:** A workbench for developing and testing UI components in isolation. Run with `npm run storybook`.

## üß™ Running Tests & Linters

This project uses ESLint and Prettier to enforce code quality and style. This is run automatically on every commit via a Husky pre-commit hook.

- To run tests: `npm test`
- To run the linter: `npm run lint`
````
</file>

<file path="src/app/forgot-password/page.js">
'use client';
import { useState } from 'react';
import api from '../../utils/axiosConfig'; // Use our new axios instance
import Link from 'next/link';
import toast from 'react-hot-toast';

export default function ForgotPasswordPage() {
    const [email, setEmail] = useState('');
    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState('');

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setMessage('');
        try {
            const response = await api.post(`${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v1/password/request`, { email });
            setMessage(response.data.message);
            toast.success("Request sent!");
        } catch (error) {
            toast.error("An error occurred.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <main className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
            <div className="w-full max-w-sm">
                <h1 className="text-3xl font-bold text-center mb-6">Reset Password</h1>
                <form onSubmit={handleSubmit} className="bg-white p-8 rounded-lg shadow-md space-y-4">
                    <p className="text-sm text-gray-600">Enter your email address and we will send you a link to reset your password.</p>
                    <input type="email" placeholder="Your Email Address" value={email} onChange={e => setEmail(e.target.value)} required className="w-full p-2 border rounded-md" />
                    <button type="submit" disabled={loading || message} className="w-full py-2 bg-primary text-white font-semibold rounded-lg disabled:bg-gray-400">
                        {loading ? 'Sending...' : 'Send Reset Link'}
                    </button>
                    {message && <p className="text-green-600 text-center text-sm pt-2">{message}</p>}
                    <div className="text-center pt-2">
                      <Link href="/" className="text-sm underline text-gray-500">Back to Login</Link>
                    </div>
                </form>
            </div>
        </main>
    );
}
</file>

<file path="src/app/reset-password/page.js">
'use client';
import { useState, Suspense } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import api from '../../utils/axiosConfig'; // Use our new axios instance
import Link from 'next/link';
import toast from 'react-hot-toast';

function ResetPasswordForm() {
    const router = useRouter();
    const searchParams = useSearchParams();
    const token = searchParams.get('token');
    const email = searchParams.get('email');

    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState('');
    const [error, setError] = useState('');

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (password !== confirmPassword) {
            setError("Passwords do not match.");
            return;
        }
        setError('');
        setLoading(true);

        try {
            const response = await api.post(`${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v1/password/reset`, { token, email, password });
            setMessage(response.data.message);
            toast.success("Password reset!");
            setTimeout(() => router.push('/'), 3000);
        } catch (err) {
            setError(err.response?.data?.message || "Failed to reset password.");
            toast.error(err.response?.data?.message || "Failed to reset password.");
        } finally {
            setLoading(false);
        }
    };

    if (!token || !email) {
        return <div className="text-red-500">Invalid password reset link.</div>;
    }

    return (
        <form onSubmit={handleSubmit} className="bg-white p-8 rounded-lg shadow-md space-y-4">
            <input type="password" placeholder="New Password" value={password} onChange={e => setPassword(e.target.value)} required className="w-full p-2 border rounded-md" />
            <input type="password" placeholder="Confirm New Password" value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} required className="w-full p-2 border rounded-md" />
            <button type="submit" disabled={loading || message} className="w-full py-2 bg-primary text-white font-semibold rounded-lg disabled:bg-gray-400">
                {loading ? 'Resetting...' : 'Reset Password'}
            </button>
            {error && <p className="text-red-500 text-center text-sm pt-2">{error}</p>}
            {message && <p className="text-green-600 text-center text-sm pt-2">{message}</p>}
        </form>
    );
}

export default function ResetPasswordPage() {
    return (
        <main className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
            <div className="w-full max-w-sm">
                <h1 className="text-3xl font-bold text-center mb-6">Set a New Password</h1>
                <Suspense fallback={<div>Loading...</div>}>
                    <ResetPasswordForm />
                </Suspense>
            </div>
        </main>
    );
}
</file>

<file path="src/components/AnimatedProgressBar.js">
'use client';

import { motion } from 'framer-motion';

/**
 * A progress bar that animates its width using the performant `scaleX` transform.
 * @param {object} props
 * @param {number} props.progress - The progress percentage (0 to 100).
 * @param {string} props.barColor - The Tailwind CSS background color class for the bar.
 */
export default function AnimatedProgressBar({ progress, barColor }) {
    return (
        // The outer container sets the boundary and clips the scaled bar
        <div className="w-full bg-gray-200 rounded-full h-2.5 overflow-hidden">
            <motion.div 
                className={`${barColor} h-2.5 rounded-full w-full`} // --- MODIFIED: Bar is now always w-full ---
                style={{ originX: 0 }} // --- MODIFIED: Ensure scaling happens from the left ---
                initial={{ scaleX: 0 }}
                animate={{ scaleX: progress / 100 }} // --- MODIFIED: Animate scaleX from 0 to 1 ---
                transition={{ duration: 0.8, ease: 'easeInOut' }}
            />
        </div>
    );
}
</file>

<file path="src/components/AppEventHandler.js">
'use client';

import { useEffect, useRef } from 'react';
import { useAuth } from '@/context/AuthContext';
import { useModal } from '@/context/ModalContext';
import { useConfig } from '@/context/ConfigContext';

/**
 * A global, invisible event handler component that listens for significant
 * user state changes from the AuthContext and triggers corresponding UI events,
 * such as the Rank Up modal.
 */
export default function AppEventHandler() {
  const { user } = useAuth();
  const { openRankUpModal } = useModal();
  const { allRanks, loading: configLoading } = useConfig();

  // Use a ref to track the previous rank key without causing re-renders.
  // We initialize it with the user's rank key when the component first mounts.
  const previousRankKey = useRef(user?.rank?.key);

  useEffect(() => {
    const currentRankKey = user?.rank?.key;

    // Do nothing until all necessary data is loaded.
    if (
      !user ||
      !currentRankKey ||
      configLoading ||
      !allRanks ||
      Object.keys(allRanks).length === 0
    ) {
      return;
    }

    // On the very first render after loading, previousRankKey.current might be undefined.
    // We set it here to establish a baseline for the *next* render.
    if (!previousRankKey.current) {
      previousRankKey.current = currentRankKey;
      return;
    }

    // This is the core logic: check if the rank has changed since the last render.
    if (currentRankKey !== previousRankKey.current) {
      const currentRankData = allRanks[currentRankKey];
      const previousRankData = allRanks[previousRankKey.current];

      // Ensure we have data for both ranks to prevent errors
      if (currentRankData && previousRankData) {
        // A promotion has occurred if the new rank requires more points than the old one.
        if (currentRankData.points > previousRankData.points) {
          openRankUpModal({
            fromRank: previousRankData,
            toRank: currentRankData,
          });
        }
      }
    }

    // After every check, update the ref to the current rank for the next comparison.
    previousRankKey.current = currentRankKey;
  }, [user, allRanks, openRankUpModal, configLoading]);

  // This component renders nothing to the DOM. Its only job is to handle effects.
  return null;
}
</file>

<file path="src/components/CatalogSkeleton.js">
import { MagnifyingGlassIcon } from '@heroicons/react/24/outline';
import PageContainer from './PageContainer';

// --- SHADCN IMPORT ---
import { Skeleton } from "@/components/ui/skeleton";

// Reusable component for a single shimmering card
function SkeletonProductCard() {
    return (
        <div className="flex flex-col space-y-3">
            <Skeleton className="h-[150px] w-full rounded-xl" />
            <div className="space-y-2">
                <Skeleton className="h-4 w-[120px]" />
                <Skeleton className="h-4 w-[80px]" />
            </div>
        </div>
    );
}

export default function CatalogSkeleton() {
    return (
        <PageContainer>
            {/* --- Skeleton Search Bar --- */}
            <div className="relative mb-6">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                <Skeleton className="h-12 w-full rounded-lg" />
            </div>
            
            {/* --- Skeleton Grid --- */}
            <div className="grid grid-cols-2 gap-4">
                <SkeletonProductCard />
                <SkeletonProductCard />
                <SkeletonProductCard />
                <SkeletonProductCard />
                <SkeletonProductCard />
                <SkeletonProductCard />
            </div>
        </PageContainer>
    );
}
</file>

<file path="src/components/ContentModal.js">
'use client';

import { useEffect, useState } from 'react';
import { getPageContentV2 } from '@/services/pageService';
import {
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from './ui/button';
import { DialogFooter, DialogClose } from '@/components/ui/dialog';
import { Skeleton } from './ui/skeleton';

const ContentSkeleton = () => (
  <div className="space-y-4">
    <Skeleton className="h-8 w-3/4" />
    <Skeleton className="h-4 w-full" />
    <Skeleton className="h-4 w-full" />
    <Skeleton className="h-4 w-5/6" />
  </div>
);

export default function ContentModal({ pageSlug, closeModal }) {
  const [pageData, setPageData] = useState({
    title: 'Loading...',
    content: '',
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (pageSlug) {
      const fetchPage = async () => {
        setLoading(true);
        try {
          const data = await getPageContentV2(pageSlug);
          setPageData(data);
        } catch (err) {
          setPageData({
            title: 'Error',
            content:
              '<p>Could not load the content for this page. Please try again later.</p>',
          });
        } finally {
          setLoading(false);
        }
      };
      fetchPage();
    }
  }, [pageSlug]);

  return (
    <DialogContent className="flex max-h-[80vh] flex-col sm:max-w-2xl">
      <DialogHeader>
        <DialogTitle className="text-2xl">{pageData.title}</DialogTitle>
      </DialogHeader>
      <div className="-mr-6 flex-grow overflow-y-auto pr-6">
        {loading ? (
          <ContentSkeleton />
        ) : (
          <div
            className="prose prose-sm max-w-none sm:prose-base"
            dangerouslySetInnerHTML={{ __html: pageData.content }}
          />
        )}
      </div>
      <DialogFooter>
        <DialogClose asChild>
          <Button type="button" onClick={closeModal}>
            Close
          </Button>
        </DialogClose>
      </DialogFooter>
    </DialogContent>
  );
}
</file>

<file path="src/components/DashboardSkeleton.js">
import PageContainer from './PageContainer';
import { Skeleton } from "@/components/ui/skeleton";

export default function DashboardSkeleton() {
    return (
        <PageContainer>
            <div className="space-y-6">
                {/* StatusCard Skeleton */}
                <Skeleton className="h-56 w-full rounded-xl" />

                {/* ActionCard Skeleton */}
                <Skeleton className="h-32 w-full rounded-xl" />
                
                {/* Carousel Skeleton */}
                <div className="space-y-3">
                    <Skeleton className="h-6 w-32" />
                    <div className="flex gap-4">
                        <Skeleton className="h-24 w-3/4 rounded-xl" />
                        <Skeleton className="h-24 w-3/4 rounded-xl" />
                    </div>
                </div>
            </div>
        </PageContainer>
    );
}
</file>

<file path="src/components/DynamicPage.js">
'use client';

import { useEffect, useState } from 'react';
// --- 1. IMPORT THE SERVICE ---
import { getPageContent } from '@/services/pageService';
import AnimatedPage from './AnimatedPage';
import Link from 'next/link';
import { ChevronLeftIcon } from '@heroicons/react/24/solid';
import DynamicHeader from './DynamicHeader'; // For a consistent header

export default function DynamicPage({ pageSlug, backLink }) {
    const [pageData, setPageData] = useState({ title: '', content: '' });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        if (pageSlug) {
            const fetchPage = async () => {
                setLoading(true);
                try {
                    // --- 2. USE THE SERVICE FUNCTION ---
                    const data = await getPageContent(pageSlug);
                    setPageData(data);
                } catch (err) {
                    console.error("Failed to fetch page content:", err);
                    setError(err.message || 'The content for this page could not be loaded.');
                    setPageData({ title: 'Page Not Found', content: '<p>The content for this page could not be loaded. Please ensure a page with the correct slug exists in the WordPress admin.</p>' });
                } finally {
                    setLoading(false);
                }
            };
            fetchPage();
        }
    }, [pageSlug]);

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                Loading...
            </div>
        );
    }

    return (
        <AnimatedPage>
            <main className="p-4 bg-white min-h-screen">
                <div className="w-full max-w-2xl mx-auto">
                    {/* --- Using DynamicHeader for consistency --- */}
                    <DynamicHeader title={pageData.title} backLink={backLink || '/profile'} />
                    
                    {error && <p className="text-red-500 text-center my-4">{error}</p>}
                    
                    {/* The 'prose' class from Tailwind Typography is great for styling HTML content */}
                    <div 
                      className="prose lg:prose-xl max-w-none" 
                      dangerouslySetInnerHTML={{ __html: pageData.content }} 
                    />
                </div>
            </main>
        </AnimatedPage>
    );
}
</file>

<file path="src/components/EditProfileModal.js">
'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { getProfileData, updateProfileData } from '@/services/profileService';
import { showToast } from './CustomToast';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Skeleton } from './ui/skeleton';

// A small helper component to render the correct input based on field type
const DynamicField = ({ field, value, handleChange }) => {
  if (field.type === 'dropdown') {
    return (
      <select
        id={field.key}
        name={field.key}
        value={value || ''}
        onChange={handleChange}
        className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background"
      >
        <option value="">-- Select an option --</option>
        {field.options.map((option) => (
          <option key={option} value={option}>
            {option}
          </option>
        ))}
      </select>
    );
  }

  if (field.type === 'date') {
    return (
      <Input
        id={field.key}
        name={field.key}
        type="date"
        value={value || ''}
        onChange={handleChange}
      />
    );
  }

  // Default to text input
  return (
    <Input
      id={field.key}
      name={field.key}
      type="text"
      value={value || ''}
      onChange={handleChange}
    />
  );
};

export default function EditProfileModal({ closeModal }) {
  const { user, login } = useAuth();
  const [profileData, setProfileData] = useState(null);
  const [formData, setFormData] = useState({});
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    const fetchProfile = async () => {
      setLoading(true);
      try {
        const data = await getProfileData();
        setProfileData(data);
        // Initialize form data with existing values
        setFormData({
          firstName: user?.firstName || '',
          lastName: data.lastName || '',
          phone_number: data.phone_number || '',
          custom_fields: data.custom_fields.values || {},
        });
      } catch (error) {
        showToast('error', 'Error', 'Could not load your profile to edit.');
        closeModal();
      } finally {
        setLoading(false);
      }
    };
    fetchProfile();
  }, [user, closeModal]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    // Check if it's a custom field or a core field
    const isCustom = profileData?.custom_fields?.definitions.some(
      (def) => def.key === name
    );

    if (isCustom) {
      setFormData((prev) => ({
        ...prev,
        custom_fields: {
          ...prev.custom_fields,
          [name]: value,
        },
      }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    try {
      await updateProfileData(formData);
      showToast('success', 'Profile Updated', 'Your changes have been saved.');

      // Refresh the main user session data to reflect any changes like name
      login(localStorage.getItem('authToken'), true);
      closeModal();
    } catch (err) {
      showToast('error', 'Update Failed', err.message);
    } finally {
      setSaving(false);
    }
  };

  const renderFormContent = () => {
    if (loading || !profileData) {
      return (
        <div className="space-y-4 py-4">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </div>
      );
    }

    const { definitions } = profileData.custom_fields;
    const editProfileFields = definitions.filter((field) =>
      field.display.includes('edit_profile')
    );

    return (
      <form
        id="edit-profile-form"
        onSubmit={handleSubmit}
        className="space-y-4 py-4"
      >
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="firstName">First Name</Label>
            <Input
              id="firstName"
              name="firstName"
              value={formData.firstName}
              onChange={handleChange}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="lastName">Last Name</Label>
            <Input
              id="lastName"
              name="lastName"
              value={formData.lastName}
              onChange={handleChange}
            />
          </div>
        </div>
        <div className="space-y-2">
          <Label htmlFor="phone_number">Phone Number</Label>
          <Input
            id="phone_number"
            name="phone_number"
            type="tel"
            value={formData.phone_number}
            onChange={handleChange}
          />
        </div>

        {/* Dynamically render custom fields */}
        {editProfileFields.map((field) => (
          <div className="space-y-2" key={field.key}>
            <Label htmlFor={field.key}>{field.label}</Label>
            <DynamicField
              field={field}
              value={formData.custom_fields[field.key]}
              handleChange={handleChange}
            />
          </div>
        ))}
      </form>
    );
  };

  return (
    <DialogContent className="sm:max-w-[425px]">
      <DialogHeader>
        <DialogTitle>Edit Profile</DialogTitle>
        <DialogDescription>
          Make changes to your profile here. Click save when you're done.
        </DialogDescription>
      </DialogHeader>
      {renderFormContent()}
      <DialogFooter>
        <Button variant="outline" onClick={closeModal} disabled={saving}>
          Cancel
        </Button>
        <Button type="submit" form="edit-profile-form" disabled={saving}>
          {saving ? 'Saving...' : 'Save Changes'}
        </Button>
      </DialogFooter>
    </DialogContent>
  );
}
</file>

<file path="src/components/MyPointsSkeleton.js">
import PageContainer from './PageContainer';
import { Skeleton } from "@/components/ui/skeleton";

// Reusable component for a single circular reward placeholder
function SkeletonRewardCircle() {
    return (
        <div className="flex flex-col items-center space-y-2">
            <Skeleton className="h-24 w-24 rounded-full" />
            <Skeleton className="h-4 w-20" />
        </div>
    );
}

export default function MyPointsSkeleton() {
    return (
        <PageContainer>
            {/* --- Member Card Skeleton --- */}
            <div className="space-y-4 mb-6 rounded-xl border bg-card text-card-foreground shadow p-6">
                <div className="flex justify-between">
                    <Skeleton className="h-6 w-24" />
                    <Skeleton className="h-6 w-20" />
                </div>
                <div className="flex flex-col items-center space-y-2 pt-4">
                    <Skeleton className="h-12 w-48" />
                    <Skeleton className="h-4 w-20" />
                </div>
            </div>

            {/* --- Progress Bar Skeleton --- */}
            <div className="space-y-3 mb-6 rounded-xl border bg-card text-card-foreground shadow p-6">
                 <Skeleton className="h-5 w-3/4" />
                 <Skeleton className="h-2.5 w-full" />
            </div>
            
            {/* --- Referral Banner Skeleton --- */}
            <Skeleton className="h-14 w-full mb-6" />

            {/* --- Rewards For You Skeleton --- */}
            <div className="space-y-4">
                <div className="flex justify-between items-center">
                    <Skeleton className="h-6 w-32" />
                    <Skeleton className="h-8 w-24" />
                </div>
                <div className="grid grid-cols-3 gap-4 pt-2">
                    <SkeletonRewardCircle />
                    <SkeletonRewardCircle />
                    <SkeletonRewardCircle />
                </div>
            </div>
        </PageContainer>
    );
}
</file>

<file path="src/components/ProductDetailSkeleton.js">
import { ChevronLeftIcon } from '@heroicons/react/24/solid';

export default function ProductDetailSkeleton() {
    return (
        <div data-testid="product-detail-skeleton" className="p-4 bg-white min-h-screen w-full max-w-md mx-auto animate-pulse">
            {/* --- Skeleton Header --- */}
            <header className="flex items-center mb-4 h-16">
                <div className="p-2 -ml-2 text-gray-300">
                    <ChevronLeftIcon className="h-7 w-7" />
                </div>
            </header>

            <div className="px-4">
                {/* --- Image Placeholder --- */}
                <div className="bg-gray-200 rounded-lg mb-6 w-full aspect-square"></div>

                {/* --- Title Placeholder --- */}
                <div className="h-8 bg-gray-300 rounded-md w-3/4 mb-4"></div>

                {/* --- Points and Button Placeholders --- */}
                <div className="flex justify-between items-center mb-8">
                    <div className="h-10 bg-gray-200 rounded-md w-1/3"></div>
                    <div className="h-12 bg-gray-300 rounded-md w-2/5"></div>
                </div>

                {/* --- Description Placeholder --- */}
                <div className="border-t border-gray-200 pt-6 space-y-3">
                    <div className="h-4 bg-gray-300 rounded-md w-1/4"></div>
                    <div className="h-4 bg-gray-200 rounded-md w-full"></div>
                    <div className="h-4 bg-gray-200 rounded-md w-full"></div>
                    <div className="h-4 bg-gray-200 rounded-md w-5/6"></div>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="src/components/RankUpModal.js">
'use client';

import { useEffect } from 'react';
import { useModal } from '@/context/ModalContext';
import { triggerHapticFeedback } from '@/utils/haptics';
import { StarIcon } from '@heroicons/react/24/solid';
import { Button } from './ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from './ui/card';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';

// Define rank styles for a consistent, themed look
const rankStyles = {
  member: { cardClasses: 'bg-slate-500 text-white' },
  bronze: { cardClasses: 'bg-amber-700 text-white' },
  silver: { cardClasses: 'bg-slate-300 text-slate-800' },
  gold: { cardClasses: 'bg-yellow-400 text-yellow-900' },
  default: { cardClasses: 'bg-gray-800 text-white' },
};

export default function RankUpModal({ details, closeModal }) {
  const { triggerConfetti } = useModal();

  useEffect(() => {
    triggerHapticFeedback();
    triggerConfetti();
  }, [triggerConfetti]);

  if (!details || !details.toRank) {
    return null;
  }

  const { toRank } = details;
  const currentStyle =
    rankStyles[toRank.name.toLowerCase()] || rankStyles.default;

  return (
    <Dialog open={true} onOpenChange={closeModal}>
      <DialogContent className="overflow-hidden p-0 text-center sm:max-w-md">
        <div className="p-8">
          <StarIcon className="mx-auto mb-4 h-16 w-16 text-yellow-400" />
          <DialogHeader>
            <DialogTitle className="mb-2 text-3xl font-bold text-foreground">
              You've Leveled Up!
            </DialogTitle>
            <DialogDescription className="text-muted-foreground">
              Congratulations! You've reached a new tier.
            </DialogDescription>
          </DialogHeader>

          <Card
            className={`my-6 flex h-52 w-full flex-col justify-between ${currentStyle.cardClasses}`}
          >
            <CardHeader>
              <CardTitle className="text-4xl font-bold uppercase tracking-wider">
                {toRank.name}
              </CardTitle>
              <CardDescription
                className={
                  currentStyle.cardClasses.includes('text-white')
                    ? 'text-white/80'
                    : 'text-muted-foreground'
                }
              >
                Reach {toRank.points.toLocaleString()} lifetime points
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-lg font-bold">UNLOCKED</p>
            </CardContent>
          </Card>

          <div className="my-6 text-left">
            <h3 className="mb-2 font-semibold text-foreground">
              New Benefits Unlocked:
            </h3>
            <ul className="list-inside list-disc space-y-1 text-sm text-muted-foreground">
              {toRank.benefits?.length > 0 ? (
                toRank.benefits.map((benefit, index) => (
                  <li key={index}>{benefit}</li>
                ))
              ) : (
                <li>Exclusive access to future rewards.</li>
              )}
            </ul>
          </div>

          <Button onClick={closeModal} className="h-12 w-full text-lg">
            Awesome!
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/components/SuccessModal.js">
'use client';

import { CheckCircleIcon } from '@heroicons/react/24/solid';

// --- SHADCN IMPORTS ---
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
// --- END IMPORTS ---

export default function SuccessModal({ title, message, buttonLabel, onButtonClick }) {
    // The parent component controls visibility, so we just need `open={true}`.
    // The `onOpenChange` with `onButtonClick` handles closing when the user clicks away,
    // though the primary action is the button.
    return (
        <Dialog open={true} onOpenChange={onButtonClick}>
            <DialogContent className="sm:max-w-md text-center">
                <DialogHeader className="flex flex-col items-center">
                    <div className="w-20 h-20 bg-green-100 text-green-500 rounded-full mx-auto flex items-center justify-center mb-6">
                        <CheckCircleIcon className="h-12 w-12" />
                    </div>
                    <DialogTitle className="text-2xl">{title}</DialogTitle>
                </DialogHeader>
                
                <div className="py-4">
                    <p className="text-muted-foreground">{message}</p>
                </div>

                <DialogFooter className="sm:justify-center">
                    <Button onClick={onButtonClick} className="w-full">
                        {buttonLabel}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
}
</file>

<file path="src/components/ui/button.jsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";
import { motion } from "framer-motion"; // --- 1. IMPORT MOTION ---

import { cn } from "@/components/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  // --- 2. CHANGE "button" TO motion.button ---
  const Comp = asChild ? Slot : motion.button;
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      // --- 3. ADD THE whileTap PROP FOR THE SQUISH EFFECT ---
      whileTap={{ scale: 0.95 }}
      {...props} />
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/dialog.jsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/components/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      // --- MODIFIED: Added custom duration and an ease-out cubic-bezier to simulate a spring ---
      // This will give a fast, bouncy feel to the modal entrance.
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] data-[state=open]:duration-500 data-[state=open]:ease-[cubic-bezier(0.16,1,0.3,1)] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/WelcomeModal.js">
'use client';

import { motion } from 'framer-motion';
import { useRouter } from 'next/navigation';
import { GiftIcon } from '@heroicons/react/24/solid';

const modalVariants = {
    hidden: { opacity: 0, scale: 0.9 },
    // --- MODIFIED: Replaced tween with spring animation ---
    visible: { 
        opacity: 1, 
        scale: 1, 
        transition: { 
            type: 'spring', 
            stiffness: 300, 
            damping: 25 
        } 
    },
    exit: { opacity: 0, scale: 0.9 },
};

export default function WelcomeModal({ bonusDetails, closeModal }) {
    const router = useRouter();

    const handleClaim = () => {
        // Navigate to the product page of the free reward
        router.push(`/catalog/${bonusDetails.rewardProductId}`);
        closeModal();
    };

    if (!bonusDetails || !bonusDetails.isEligible) {
        return null;
    }
    
    return (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4">
            <motion.div
                className="bg-white rounded-2xl shadow-xl w-full max-w-sm p-8 text-center"
                variants={modalVariants}
                initial="hidden"
                animate="visible"
                exit="exit"
            >
                <div className="w-20 h-20 bg-primary/10 text-primary rounded-full mx-auto flex items-center justify-center mb-6">
                    <GiftIcon className="h-12 w-12" />
                </div>
                
                <h2 className="text-2xl font-bold text-gray-800 mb-2">Welcome Aboard!</h2>
                <p className="text-gray-600 mb-6">As a thank you for your first scan, you've unlocked a special reward!</p>

                <div className="bg-gray-100 rounded-lg p-4 mb-8">
                    <p className="text-sm text-gray-500">FREE REWARD</p>
                    <p className="text-lg font-semibold text-gray-900">{bonusDetails.rewardName}</p>
                </div>
                
                <button
                    onClick={handleClaim}
                    className="w-full py-3 px-6 bg-primary text-white font-bold rounded-lg transform hover:scale-105 transition-transform"
                >
                    Claim My Reward
                </button>
            </motion.div>
        </div>
    );
}
</file>

<file path="src/context/OnboardingContext.js">
'use client';

import { createContext, useContext, useMemo } from 'react';
import { useAuth } from './AuthContext';

const OnboardingContext = createContext();

export function OnboardingProvider({ children }) {
    const { user } = useAuth();

    const questLine = [
        {
            step: 1,
            show: true,
            message: "Your journey begins! Scan your first product to earn points and a welcome gift.",
            ctaText: "Go to Scanner",
            ctaLink: "/scan",
        },
        {
            step: 2,
            show: true,
            message: "Great start! Now, redeem your first reward to see how easy it is.",
            ctaText: "Browse Rewards",
            ctaLink: "/catalog",
        },
        {
            step: 3,
            show: true,
            message: "You're a natural! Add your birthday to your profile to get a special gift on your day.",
            ctaText: "Add Birthday",
            ctaLink: "OPEN_EDIT_PROFILE_MODAL", // Special keyword to trigger modal
        },
        {
            step: 4,
            show: false,
            message: "You've completed your onboarding journey!",
            ctaText: "",
            ctaLink: "",
        }
    ];

    const currentQuest = useMemo(() => {
        const userStep = user?.onboardingQuestStep || 1;
        const quest = questLine.find(q => q.step === userStep) || questLine[questLine.length - 1];
        return quest;
    }, [user]);

    return (
        <OnboardingContext.Provider value={currentQuest}>
            {children}
        </OnboardingContext.Provider>
    );
}

export function useOnboarding() {
    return useContext(OnboardingContext);
}
</file>

<file path="src/services/pageService.js">
import api from '@/utils/axiosConfig';

const API_BASE_V2 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v2`;

/**
 * Fetches the content of a specific WordPress page by its slug.
 * This is the new v2 endpoint.
 * @param {string} slug The slug of the page to fetch (e.g., 'terms-and-conditions').
 * @returns {Promise<object>} An object containing the page title and content.
 */
export const getPageContentV2 = async (slug) => {
  try {
    const response = await api.get(`${API_BASE_V2}/pages/${slug}`);
    return response.data;
  } catch (error) {
    throw new Error(`Could not load page content for "${slug}".`);
  }
};
</file>

<file path="src/services/referralService.js">
import api from '@/utils/axiosConfig';

const API_BASE_V2 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v2`;

/**
 * Fetches a preview of the referral gift for unauthenticated users.
 */
export const getReferralGift = async () => {
  try {
    const response = await api.get(`${API_BASE_V2}/unauthenticated/referral-gift-preview`);
    return response.data;
  } catch (error) {
    throw new Error('Could not load the referral gift preview.');
  }
};

/**
 * Fetches the list of users referred by the current user from the v2 endpoint.
 * @returns {Promise<Array>} A list of referral objects.
 */
export const getMyReferrals = async () => {
  try {
    const response = await api.get(`${API_BASE_V2}/users/me/referrals`);
    return response.data;
  } catch (error) {
    throw new Error('Could not fetch your referral history.');
  }
};

/**
 * Requests pre-composed "nudge" messages from the v2 endpoint for a specific referee.
 * @param {string} refereeEmail The email of the user to nudge.
 * @returns {Promise<object>} An object containing shareable message options.
 */
export const getNudgeOptions = async (refereeEmail) => {
  try {
    const response = await api.post(`${API_BASE_V2}/users/me/referrals/nudge`, {
      email: refereeEmail,
    });
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message || 'Failed to prepare nudge.'
    );
  }
};
</file>

<file path="src/utils/rankCalculations.js">
'use client';

/**
 * Calculates a user's progress towards their next rank.
 * @param {object} user The user object from the AuthContext.
 * @returns {object} An object containing nextRank, progressPercentage, and pointsNeeded.
 */
export function calculateRankProgress(user) {
    if (!user || !user.allRanks || user.lifetimePoints === null || user.lifetimePoints === undefined) {
        return { nextRank: null, progressPercentage: 0, pointsNeeded: 0 };
    }

    // --- THIS IS THE FIX ---
    // The utility now sorts the ranks itself, ensuring it always works correctly
    // regardless of the order it receives them in.
    const sortedRanksAsc = Object.values(user.allRanks).sort((a, b) => a.points - b.points);
    
    let nextRank = null;
    let currentRankPoints = 0;

    // Iterate through the ranks sorted from LOWEST to HIGHEST
    for (const rank of sortedRanksAsc) {
        if (user.lifetimePoints < rank.points) {
            // This is the first rank the user has NOT yet achieved. This is their "nextRank".
            nextRank = rank;
            break; 
        }
        // If the user has enough points for this rank, we update the floor for our calculation.
        currentRankPoints = rank.points;
    }

    // --- The rest of the logic is now correct because the inputs are sorted correctly ---
    if (nextRank) {
        const pointsInCurrentTier = user.lifetimePoints - currentRankPoints;
        const pointsForNextTier = nextRank.points - currentRankPoints;

        if (pointsForNextTier <= 0) {
            return { nextRank, progressPercentage: 100, pointsNeeded: 0 };
        }

        const progressPercentage = (pointsInCurrentTier / pointsForNextTier) * 100;
        const pointsNeeded = nextRank.points - user.lifetimePoints;
        
        return { nextRank, progressPercentage, pointsNeeded };
    }

    // If no nextRank was found, it means the user is at the highest tier.
    return { nextRank: null, progressPercentage: 100, pointsNeeded: 0 };
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: {
    'tailwindcss': {},
    'autoprefixer': {},
  },
};

export default config;
</file>

<file path="src/components/EmptyState.js">
'use client';

import { motion } from 'framer-motion';
import Link from 'next/link';

// --- SHADCN IMPORT ---
import { Button } from './ui/button';

export default function EmptyState({ Icon, title, message, buttonLabel, buttonHref }) {
    return (
        <motion.div 
            className="text-center py-10 px-4 bg-card rounded-lg shadow-sm mt-6 border"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
        >
            <div className="flex justify-center mb-4">
                <Icon className="w-16 h-16 text-muted-foreground/50" />
            </div>
            <h3 className="text-xl font-semibold text-card-foreground mb-2">{title}</h3>
            <p className="text-muted-foreground mb-6">{message}</p>
            
            {buttonLabel && buttonHref && (
                <Link href={buttonHref}>
                    <Button>{buttonLabel}</Button>
                </Link>
            )}
        </motion.div>
    );
}
</file>

<file path="src/components/FloatingLabelInput.js">
"use client";

import { useState } from "react";
import { motion } from "framer-motion"; // Using framer-motion as it's already in the project
import { cn } from "@/components/lib/utils"; // Corrected path for our project structure

const containerVariants = {
  initial: {},
  animate: {
    transition: {
      staggerChildren: 0.05,
    },
  },
};

const letterVariants = {
  initial: {
    y: 0,
    color: "hsl(var(--foreground))", // Use theme variable for text color
  },
  animate: {
    y: "-120%",
    color: "hsl(var(--primary))", // Use theme variable for focused label color
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 20,
    },
  },
};

/**
 * An input component with a floating label that animates letter by letter.
 * Adapted from the user-provided component to fit the project's JS and theme structure.
 * @param {object} props - Extends standard HTML input attributes.
 * @param {string} props.label - The text for the floating label.
 */
export const FloatingLabelInput = ({
  label,
  className = "",
  value,
  ...props
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const showLabel = isFocused || (value && value.length > 0);

  return (
    <div className={cn("relative", className)}>
      <motion.div
        className="absolute top-1/2 -translate-y-1/2 pointer-events-none text-foreground"
        variants={containerVariants}
        initial="initial"
        animate={showLabel ? "animate" : "initial"}
      >
        {label.split("").map((char, index) => (
          <motion.span
            key={index}
            className="inline-block text-base" // Use text-base to match other inputs
            variants={letterVariants}
            style={{ willChange: "transform" }}
          >
            {char === " " ? "\u00A0" : char}
          </motion.span>
        ))}
      </motion.div>

      <input
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
        value={value}
        {...props}
        className="outline-none border-b-2 border-input py-2 w-full text-base font-medium text-foreground bg-transparent placeholder-transparent focus:border-primary"
      />
    </div>
  );
};
</file>

<file path="src/components/ShippingFormModal.js">
'use client';
import { useState } from 'react';
import { PencilIcon } from '@heroicons/react/24/solid';

// --- SHADCN IMPORTS ---
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
// --- END IMPORTS ---

// Sub-component for displaying the static address (now uses Shadcn components)
const AddressDisplay = ({ details, onEdit }) => (
    <div className="bg-secondary p-4 rounded-lg border mb-6">
        <div className="flex justify-between items-start">
            <div>
                <p className="font-semibold text-secondary-foreground">{details.firstName} {details.lastName}</p>
                <p className="text-muted-foreground">{details.address1}</p>
                <p className="text-muted-foreground">{details.city}, {details.state} {details.zip}</p>
            </div>
            <Button onClick={onEdit} variant="ghost" size="icon" className="h-8 w-8">
                <PencilIcon className="h-4 w-4" />
                <span className="sr-only">Edit Address</span>
            </Button>
        </div>
    </div>
);

// Sub-component for the editable form fields (now uses Shadcn components)
const AddressForm = ({ details, handleChange }) => (
    <div className="space-y-4 mb-6">
        <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
                <Label htmlFor="firstName">First Name</Label>
                <Input id="firstName" name="firstName" placeholder="Jane" value={details.firstName} onChange={handleChange} required />
            </div>
            <div className="space-y-2">
                <Label htmlFor="lastName">Last Name</Label>
                <Input id="lastName" name="lastName" placeholder="Doe" value={details.lastName} onChange={handleChange} required />
            </div>
        </div>
        <div className="space-y-2">
            <Label htmlFor="address1">Address Line 1</Label>
            <Input id="address1" name="address1" placeholder="123 Main St" value={details.address1} onChange={handleChange} required />
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="space-y-2">
                <Label htmlFor="city">City</Label>
                <Input id="city" name="city" placeholder="Anytown" value={details.city} onChange={handleChange} required />
            </div>
            <div className="space-y-2">
                <Label htmlFor="state">State</Label>
                <Input id="state" name="state" placeholder="CA" value={details.state} onChange={handleChange} required />
            </div>
            <div className="space-y-2">
                <Label htmlFor="zip">ZIP Code</Label>
                <Input id="zip" name="zip" placeholder="12345" value={details.zip} onChange={handleChange} required />
            </div>
        </div>
    </div>
);


export default function ShippingFormModal({ onSubmit, onCancel, currentUser }) {
    // --- START FIX: Correctly access the shipping data from the user object ---
    const [details, setDetails] = useState({
        firstName: currentUser?.shipping?.shipping_first_name || currentUser?.firstName || '',
        lastName: currentUser?.shipping?.shipping_last_name || currentUser?.lastName || '',
        address1: currentUser?.shipping?.shipping_address_1 || '',
        city: currentUser?.shipping?.shipping_city || '',
        state: currentUser?.shipping?.shipping_state || '',
        zip: currentUser?.shipping?.shipping_postcode || ''
    });
    // --- END FIX ---

    const isAddressComplete = details.address1 && details.city && details.state && details.zip;
    const [isEditing, setIsEditing] = useState(!isAddressComplete);

    const handleChange = (e) => {
        setDetails({ ...details, [e.target.name]: e.target.value });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit(details);
    };
    
    return (
        <Dialog open={true} onOpenChange={(isOpen) => !isOpen && onCancel()}>
            <DialogContent className="sm:max-w-xl">
                <DialogHeader>
                    <DialogTitle className="text-2xl">
                        {isEditing ? 'Update Shipping Details' : 'Confirm Shipping Details'}
                    </DialogTitle>
                    <DialogDescription>
                        {isEditing 
                            ? 'Please provide your address to ship this reward.' 
                            : 'Your reward will be shipped to the address below.'}
                    </DialogDescription>
                </DialogHeader>

                <form id="shipping-form" onSubmit={handleSubmit}>
                    {isEditing ? (
                        <AddressForm details={details} handleChange={handleChange} />
                    ) : (
                        <AddressDisplay details={details} onEdit={() => setIsEditing(true)} />
                    )}
                </form>
                
                <DialogFooter>
                    <Button type="button" variant="outline" onClick={onCancel}>Cancel</Button>
                    <Button type="submit" form="shipping-form">
                        {isEditing ? 'Save & Redeem' : 'Confirm & Redeem'}
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
}
</file>

<file path="src/context/ThemeContext.js">
'use client';

import { createContext, useContext, useEffect } from 'react';
import { useAuth } from './AuthContext';

const ThemeContext = createContext();

export function ThemeProvider({ children }) {
    const { user, loading } = useAuth();

    useEffect(() => {
        if (loading || !user) return;

        // --- START: DYNAMIC THEME APPLICATION ---

        const theme = user?.settings?.theme || {};

        const styleId = 'dynamic-theme-styles';
        
        // Remove old style tag if it exists
        const existingStyle = document.getElementById(styleId);
        if (existingStyle) {
            existingStyle.remove();
        }

        let cssVariables = '';

        // Loop through the theme object from the API and create CSS variables
        for (const key in theme) {
            if (Object.hasOwnProperty.call(theme, key)) {
                const value = theme[key];
                if (key === 'primaryFont') {
                    // Handle font separately
                    continue;
                }
                // e.g., 'primary-foreground' becomes '--primary-foreground'
                cssVariables += `--${key}: ${value};\n`;
            }
        }

        const css = `
            :root {
                ${cssVariables}
            }
        `;

        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = css;
        document.head.appendChild(style);
        
        // Font loading logic (remains mostly the same but uses the correct key)
        const fontToLoad = theme.primaryFont || 'Inter'; // Default to Inter
        if (fontToLoad) {
            const fontName = fontToLoad.replace(/\s/g, '+');
            const fontId = `google-font-${fontName}`;
            if (!document.getElementById(fontId)) {
                const link = document.createElement('link');
                link.id = fontId;
                link.href = `https://fonts.googleapis.com/css2?family=${fontName}:wght@400;500;600;700&display=swap`;
                link.rel = 'stylesheet';
                document.head.appendChild(link);
            }
            // Also update the font-family variable
            document.documentElement.style.setProperty('--primary-font', `"${fontToLoad}", sans-serif`);
        }
        // --- END: DYNAMIC THEME APPLICATION ---

    }, [user, loading]);

    return <ThemeContext.Provider value={{}}>{children}</ThemeContext.Provider>;
}

export function useTheme() {
    return useContext(ThemeContext);
}
</file>

<file path="src/services/woocommerceService.js">
import api from '@/utils/axiosConfig';

// Define the v2 API base for our new proxy endpoints.
const API_BASE_V2 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v2`;

/**
 * Fetches the rewards catalog from our secure backend proxy.
 * No API keys are needed here. Authentication is handled by the user's JWT.
 * @returns {Promise<Array>} A list of product objects.
 */
export const getProducts = async () => {
    try {
        const response = await api.get(`${API_BASE_V2}/catalog/products`);
        return response.data;
    } catch (error) {
        throw new Error('Could not load the product catalog.');
    }
};

/**
 * Fetches a single product by its ID from our secure backend proxy.
 * @param {string|number} productId The ID of the product to fetch.
 * @returns {Promise<Object>} The product object.
 */
export const getProductById = async (productId) => {
    try {
        const response = await api.get(`${API_BASE_V2}/catalog/products/${productId}`);
        return response.data;
    } catch (error) {
        throw new Error('Could not load product details.');
    }
};
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
    darkMode: ['class'],
    content: [
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/context/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
  	extend: {
  		colors: {
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		fontFamily: {
  			sans: [
  				'var(--primary-font)',
  				'sans-serif'
  			]
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [
    require('@tailwindcss/typography'),
      require("tailwindcss-animate")
],
};
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "@/components/*": ["components/*"],
      "@/context/*": ["context/*"],
      "@/utils/*": ["utils/*"],
      "@/services/*": ["services/*"] // <-- ADD THIS LINE
    }
  }
}
</file>

<file path="src/app/page.js">
'use client';

import { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import Image from 'next/image';
import LoginForm from '../components/LoginForm';
import Dashboard from '../components/Dashboard';
import RegisterForm from '../components/RegisterForm';
import DashboardSkeleton from '../components/DashboardSkeleton';
import { motion, AnimatePresence } from 'framer-motion';

const formVariants = {
  hidden: {
    opacity: 0,
    y: 50,
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.5,
      ease: 'circOut',
    },
  },
  exit: {
    opacity: 0,
    y: -50,
    transition: {
      duration: 0.3,
      ease: 'circIn',
    },
  },
};

export default function HomePage() {
  const { isAuthenticated, loading } = useAuth();
  const [showLogin, setShowLogin] = useState(true);

  if (loading) {
    return (
        // --- MODIFIED: Removed the <main> tag here ---
        <div className="flex items-center justify-center min-h-screen bg-gray-50">
            <DashboardSkeleton />
        </div>
    );
  }

  const authContent = (
    <div className="text-center w-full max-w-sm px-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        <Image
          src="/logo.png"
          alt="CannaRewards Logo"
          width={80}
          height={80}
          className="mx-auto mb-8"
        />
      </motion.div>
      
      <div className="bg-white p-8 rounded-lg shadow-md">
        <AnimatePresence mode="wait">
          <motion.div
            key={showLogin ? 'login' : 'register'}
            variants={formVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            {showLogin ? (
              <LoginForm onSwitchToRegister={() => setShowLogin(false)} />
            ) : (
              <RegisterForm onSwitchToLogin={() => setShowLogin(true)} />
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );

  return (
    // --- MODIFIED: Removed the <main> tag here ---
    <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
      {isAuthenticated ? <Dashboard /> : authContent}
    </div>
  );
}
</file>

<file path="src/components/MenuItem.js">
'use client';

import Link from 'next/link';
import { motion } from 'framer-motion';
import { ChevronRightIcon } from '@heroicons/react/24/solid';
import { triggerHapticFeedback } from '@/utils/haptics';

export default function MenuItem({ href, label, onClick, isDestructive = false }) {
    const textColor = isDestructive ? 'text-red-500 font-medium' : 'text-gray-800';
    
    const MotionWrapper = motion.div;

    const content = (
        <MotionWrapper 
            className="bg-white p-4 flex justify-between items-center border-b border-gray-200 cursor-pointer last:border-b-0 group-hover:bg-gray-50 transition-colors"
            whileTap={{ scale: 0.98, backgroundColor: '#f9fafb' }}
        >
            <span className={textColor}>{label}</span>
            <ChevronRightIcon className={`h-5 w-5 ${isDestructive ? 'text-red-400' : 'text-gray-400'}`} />
        </MotionWrapper>
    );

    // If an onClick function is provided, render a button. Otherwise, render a Link.
    if (onClick) {
        return (
            <button onClick={() => { triggerHapticFeedback(); onClick(); }} className="w-full text-left group">
                {content}
            </button>
        )
    }

    return (
        <Link href={href} className="block group" onClick={triggerHapticFeedback}>
            {content}
        </Link>
    );
}
</file>

<file path="src/components/PageContainer.js">
'use client';

// PageContainer is a simple layout component. It does not need any hooks or other imports.

export default function PageContainer({ children }) {
  return (
    // --- MODIFIED: Changed <main> to <div> to prevent nesting ---
    <div
      className="p-4 bg-white min-h-screen"
      style={{
        paddingTop: `calc(5rem + env(safe-area-inset-top))`,
        paddingBottom: `calc(5rem + env(safe-area-inset-bottom))`, 
      }}
    >
      <div className="w-full max-w-md mx-auto h-full">
        {children}
      </div>
    </div>
  );
}
</file>

<file path="src/services/authService.js">
import api from '@/utils/axiosConfig';

// Define the base URLs for our v2 and legacy v1 APIs.
const API_BASE_V2 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v2`;
const API_BASE_V1 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v1`; // For password reset

/**
 * Logs a user in by calling the /v2/auth/login endpoint.
 * @param {string} email The user's email.
 * @param {string} password The user's password.
 * @returns {Promise<object>} The server response containing the JWT token and user data.
 */
export const loginUser = async (email, password) => {
  try {
    const response = await api.post(`${API_BASE_V2}/auth/login`, {
      email,
      password,
    });
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message ||
        'Login failed. Please check your credentials.'
    );
  }
};

/**
 * Registers a new user by calling the /v2/auth/register endpoint.
 * @param {object} registrationData The user's registration details.
 * @returns {Promise<object>} The server response.
 */
export const registerUser = async (registrationData) => {
  try {
    // This now points to our clean, contract-compliant v2 endpoint.
    const response = await api.post(
      `${API_BASE_V2}/auth/register`,
      registrationData
    );
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message || 'Registration failed. Please try again.'
    );
  }
};

/**
 * Fetches the lightweight session data for an already authenticated user.
 * @returns {Promise<object>} The user session object.
 */
export const getUserSession = async () => {
  try {
    const response = await api.get(`${API_BASE_V2}/users/me/session`);
    return response.data;
  } catch (error) {
    // This error is critical as it often means the token is invalid.
    // The AuthContext will handle this by logging the user out.
    throw new Error('Your session is invalid or has expired. Please log in again.');
  }
};

/**
 * Requests a password reset link from the legacy v1 endpoint.
 * @param {string} email The user's email address.
 * @returns {Promise<object>} The server's confirmation message.
 */
export const requestPasswordReset = async (email) => {
    try {
        const response = await api.post(`${API_BASE_V1}/password/request`, { email });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || "An error occurred while requesting a password reset.");
    }
};

/**
 * Submits a new password along with the reset token.
 * @param {string} token The password reset token from the email link.
 * @param {string} email The user's email.
 * @param {string} password The new password.
 * @returns {Promise<object>} The server's success message.
 */
export const resetPassword = async (token, email, password) => {
    try {
        const response = await api.post(`${API_BASE_V1}/password/reset`, { token, email, password });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || "Failed to reset password. The link may be invalid or expired.");
    }
}
</file>

<file path="src/app/globals.css">
/* This is the correct way to include Tailwind's base styles in a Next.js app */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* You can add custom utility classes or overrides here if needed */



@layer base {
  :root {

    --background: 0 0% 100%;

    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;

    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;

    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;

    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;

    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;

    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;

    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;

    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;

    --input: 214.3 31.8% 91.4%;

    --ring: 222.2 84% 4.9%;

    --chart-1: 12 76% 61%;

    --chart-2: 173 58% 39%;

    --chart-3: 197 37% 24%;

    --chart-4: 43 74% 66%;

    --chart-5: 27 87% 67%;

    --radius: 0.5rem
  }
  .dark {

    --background: 222.2 84% 4.9%;

    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;

    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;

    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;

    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;

    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;

    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;

    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;

    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;

    --input: 217.2 32.6% 17.5%;

    --ring: 212.7 26.8% 83.9%;

    --chart-1: 220 70% 50%;

    --chart-2: 160 60% 45%;

    --chart-3: 30 80% 55%;

    --chart-4: 280 65% 60%;

    --chart-5: 340 75% 55%
  }
}



@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/app/how-to-earn/page.js">
'use client';

import { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import AnimatedProgressBar from '../../components/AnimatedProgressBar'; // We'll use this
import DynamicHeader from '../../components/DynamicHeader';
import PageContainer from '../../components/PageContainer'; // Use our standard container
import { ArrowPathRoundedSquareIcon } from '@heroicons/react/24/solid';

// --- SHADCN IMPORTS ---
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
// --- END IMPORTS ---

// Rank styles remain the same
const rankStyles = {
    member: { cardClasses: 'bg-gradient-to-br from-gray-400 via-gray-200 to-gray-400', textClasses: 'text-gray-800' },
    bronze: { cardClasses: 'bg-gradient-to-br from-amber-700 via-amber-500 to-yellow-300', textClasses: 'text-white' },
    silver: { cardClasses: 'bg-gradient-to-br from-slate-400 via-slate-200 to-slate-400', textClasses: 'text-slate-800' },
    gold: { cardClasses: 'bg-gradient-to-br from-yellow-500 via-yellow-300 to-yellow-500', textClasses: 'text-yellow-900' },
    black: { cardClasses: 'bg-gradient-to-br from-gray-900 via-black to-gray-800', textClasses: 'text-white' },
    default: { cardClasses: 'bg-gradient-to-br from-gray-700 to-black', textClasses: 'text-white' }
};

// --- REFACTORED FLIPPABLE RANK CARD ---
function FlippableRankCard({ rankName, pointsRequired, userLifetimePoints, benefits = [] }) {
    const [isFlipped, setIsFlipped] = useState(false);

    const isUnlocked = userLifetimePoints >= pointsRequired;
    const progress = pointsRequired > 0 ? Math.min((userLifetimePoints / pointsRequired) * 100, 100) : 100;

    const currentStyle = rankStyles[rankName.toLowerCase()] || rankStyles.default;
    const frontCardClasses = isUnlocked ? `${currentStyle.cardClasses} ${currentStyle.textClasses}` : 'bg-muted text-muted-foreground';
    const frontHeaderClasses = isUnlocked ? 'text-yellow-300' : 'text-muted-foreground/50';
    
    const flipVariants = { front: { rotateY: 0 }, back: { rotateY: 180 } };

    return (
        <div className="w-full h-52 [perspective:1000px] cursor-pointer" onClick={() => setIsFlipped(!isFlipped)}>
            <motion.div
                className="relative w-full h-full [transform-style:preserve-3d]"
                variants={flipVariants}
                initial={false}
                animate={isFlipped ? "back" : "front"}
                transition={{ duration: 0.6 }}
            >
                {/* --- FRONT OF CARD (Built with Shadcn Card) --- */}
                <div className="absolute w-full h-full [backface-visibility:hidden]">
                    <Card className={`w-full h-full flex flex-col justify-between ${frontCardClasses}`}>
                        <CardHeader>
                            <p className={`text-sm uppercase font-bold ${frontHeaderClasses}`}>{isUnlocked ? "Unlocked" : "Locked"}</p>
                            <CardTitle className="text-4xl font-bold uppercase tracking-wider">{rankName}</CardTitle>
                            <CardDescription className={isUnlocked ? 'text-white/80' : 'text-muted-foreground'}>
                                Reach {pointsRequired.toLocaleString()} lifetime points
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            {pointsRequired > 0 && (
                                <div className="space-y-1">
                                    <AnimatedProgressBar progress={isUnlocked ? 100 : progress} barColor="bg-green-500" />
                                    <div className="flex justify-between items-center text-xs">
                                        <div className="opacity-60 flex items-center space-x-1">
                                            <span>Tap to flip</span>
                                            <ArrowPathRoundedSquareIcon className="w-4 h-4" />
                                        </div>
                                        <p className="font-bold">{userLifetimePoints.toLocaleString()} / {pointsRequired.toLocaleString()}</p>
                                    </div>
                                </div>
                            )}
                        </CardContent>
                    </Card>
                </div>

                {/* --- BACK OF CARD (Built with Shadcn Card) --- */}
                <div className="absolute w-full h-full [transform:rotateY(180deg)] [backface-visibility:hidden]">
                    <Card className="w-full h-full bg-card text-card-foreground">
                        <CardHeader>
                            <CardTitle>{rankName} Benefits</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
                                {benefits.length > 0 ? (
                                    benefits.map((benefit, index) => <li key={index}>{benefit}</li>)
                                ) : (
                                    <li>No special benefits for this tier.</li>
                                )}
                            </ul>
                        </CardContent>
                    </Card>
                </div>
            </motion.div>
        </div>
    );
}

const containerVariants = { hidden: { opacity: 1 }, visible: { opacity: 1, transition: { staggerChildren: 0.15 } } };
const itemVariants = { hidden: { y: 20, opacity: 0 }, visible: { y: 0, opacity: 1, transition: { type: 'spring', stiffness: 100 } } };

export default function HowToEarnPage() {
    const { user, isAuthenticated, loading } = useAuth();
    const router = useRouter();

    if (loading || !user) {
        return <div className="flex items-center justify-center min-h-screen">Loading...</div>;
    }
    if (!isAuthenticated) {
        router.push('/');
        return null;
    }

    const ranksArray = user.allRanks 
        ? Object.values(user.allRanks).sort((a, b) => a.points - b.points) // Sort ascending to show progress
        : [];

    return (
        <PageContainer>
            <DynamicHeader title="How To Earn" backLink="/my-points" />
            
            <div className="mt-4">
                {ranksArray.length > 0 ? (
                    <motion.div 
                        className="space-y-6"
                        variants={containerVariants} 
                        initial="hidden" 
                        animate="visible"
                    >
                        {ranksArray.map(rank => (
                            <motion.div key={rank.name} variants={itemVariants}>
                                <FlippableRankCard
                                    rankName={rank.name}
                                    pointsRequired={rank.points}
                                    userLifetimePoints={user.lifetimePoints}
                                    benefits={rank.benefits}
                                />
                            </motion.div>
                        ))}
                    </motion.div>
                ) : (
                    <p className="text-center text-muted-foreground">Rank information is not available yet.</p>
                )}
            </div>
        </PageContainer>
    );
}
</file>

<file path="src/components/AnimatedPage.js">
'use client';

import { motion } from 'framer-motion';

const pageVariants = {
  initial: {
    opacity: 0,
    y: 15,
  },
  in: {
    opacity: 1,
    y: 0,
  },
  // The 'exit' variant is no longer used by this component's parent
};

const pageTransition = {
  type: 'tween',
  ease: 'anticipate',
  duration: 0.4,
};

export default function AnimatedPage({ children }) {
  return (
    <motion.div
      initial="initial"
      animate="in"
      // REMOVED: exit="exit"
      variants={pageVariants}
      transition={pageTransition}
    >
      {children}
    </motion.div>
  );
}
</file>

<file path="src/components/DynamicHeader.js">
'use client';

import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { ChevronLeftIcon } from '@heroicons/react/24/solid';

// --- SHADCN IMPORT ---
import { Button } from './ui/button';

export default function DynamicHeader({ title, backLink }) {
    const router = useRouter();

    const BackButton = () => {
        const buttonContent = (
            <>
                <ChevronLeftIcon className="h-6 w-6" />
                <span className="sr-only">Back</span>
            </>
        );

        const buttonProps = {
            variant: "ghost",
            size: "icon",
            className: "text-foreground"
        };
        
        if (backLink) {
            return (
                <Link href={backLink} legacyBehavior passHref>
                    <Button {...buttonProps} asChild>
                        <a>{buttonContent}</a>
                    </Button>
                </Link>
            );
        }
        
        return (
            <Button {...buttonProps} onClick={() => router.back()}>
                {buttonContent}
            </Button>
        );
    };

    return (
        <header className="flex items-center h-16">
            <div className="w-1/4"> {/* Left container */}
                <BackButton />
            </div>
            <div className="w-1/2 text-center"> {/* Center container */}
                <h1 className="text-xl font-semibold truncate text-foreground">{title}</h1>
            </div>
            <div className="w-1/4"></div> {/* Right container for alignment */}
        </header>
    );
}
</file>

<file path="src/components/Header.js">
'use client';

import Link from 'next/link';
import Image from 'next/image';
import { useAuth } from '../context/AuthContext';
import { usePathname } from 'next/navigation';
import AnimatedCounter from './AnimatedCounter'; // We are importing the component we just created

export default function Header() {
    const { user, isAuthenticated } = useAuth();
    const pathname = usePathname();

    // A list of exact paths where the global header should NOT be displayed.
    // These pages typically have their own custom headers or require a full-screen, immersive experience.
    const pagesWithoutHeader = [
        '/',                // The main dashboard is a full-screen welcome page.
        '/claim',           // The claim/register flow is a special layout.
        '/forgot-password',
        '/reset-password',
        '/scan',            // The scanner needs the full screen for the camera view.
    ];

    // The header should be hidden if the user isn't authenticated OR if the current path is in our hide list.
    const shouldHideHeader = !isAuthenticated || pagesWithoutHeader.includes(pathname);

    if (shouldHideHeader) {
        return null; // Don't render anything if the header should be hidden.
    }

    return (
        <header 
            className="fixed top-0 left-0 right-0 bg-white shadow-sm z-20"
            // This ensures content doesn't get stuck under the "notch" on iPhones.
            style={{ paddingTop: 'env(safe-area-inset-top)' }}
        >
            <div className="flex justify-between items-center max-w-md mx-auto p-4 h-20">
                
                {/* A placeholder on the left for proper centering of the logo. Can be used for notifications in the future. */}
                <div className="w-1/4"></div>

                {/* The logo now links to the main "My Points" hub, which is a more useful landing spot than the dashboard. */}
                <div className="w-1/2 flex justify-center">
                    <Link href="/my-points">
                        <Image
                            src="/logo.png" 
                            alt="Brand Logo"
                            width={40}
                            height={40}
                            priority={true}
                            className="object-contain"
                        />
                    </Link>
                </div>
                
                {/* The points counter on the right, which links to the rewards catalog. */}
                <div className="w-1/4 flex justify-end">
                    <Link href="/catalog" className="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors">
                        <span className="font-bold text-gray-700 text-sm">
                            {/* --- FIX: Use the correct 'points_balance' key --- */}
                            <AnimatedCounter value={user?.points_balance || 0} />
                        </span>
                        <span className="text-xs text-gray-500">Points</span>
                    </Link>
                </div>
            </div>
        </header>
    );
}
</file>

<file path="src/app/profile/refer/page.js">
'use client';

import { useEffect, useState, useMemo } from 'react';
import { useAuth } from '@/context/AuthContext';
import { QRCodeCanvas } from 'qrcode.react';
import { getMyReferrals, getNudgeOptions } from '@/services/referralService';
import DynamicHeader from '@/components/DynamicHeader';
import {
  ShareIcon,
  ClipboardDocumentIcon,
  PaperAirplaneIcon,
  StarIcon,
} from '@heroicons/react/24/outline';
import { showToast } from '@/components/CustomToast';
import { triggerHapticFeedback } from '@/utils/haptics';
import StaggeredList from '@/components/StaggeredList';
import NudgeOptionsModal from '@/components/NudgeOptionsModal';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { Dialog } from '@/components/ui/dialog';
import ReferralSkeleton from '@/components/ReferralSkeleton';
import { Skeleton } from '@/components/ui/skeleton';
import PageContainer from '@/components/PageContainer';

const ReferralStats = ({ referrals }) => {
  const successfulReferrals = useMemo(
    () => referrals.filter((r) => r.status_key === 'awarded'),
    [referrals]
  );
  const bonusPoints = useMemo(() => {
    // This should later be pulled from a config setting
    const POINTS_PER_REFERRAL = 200;
    return successfulReferrals.length * POINTS_PER_REFERRAL;
  }, [successfulReferrals]);

  return (
    <Card className="mt-4">
      <CardHeader>
        <CardTitle className="text-lg">Your Impact</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4 text-center">
          <div>
            <p className="text-3xl font-bold text-primary">
              {successfulReferrals.length}
            </p>
            <p className="text-sm text-muted-foreground">
              Successful Referrals
            </p>
          </div>
          <div>
            <p className="text-3xl font-bold text-primary">
              {bonusPoints.toLocaleString()}
            </p>
            <p className="text-sm text-muted-foreground">Bonus Points Earned</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const ReferralListItem = ({ referral, onNudge, nudgingEmail, isNew }) => {
  return (
    <Card className={isNew ? 'border-2 border-primary shadow-lg' : ''}>
      <CardContent className="flex items-center justify-between p-4">
        <div className="min-w-0 flex-1">
          <p className="truncate font-semibold text-card-foreground">
            {referral.name}
          </p>
          <p className="text-sm text-muted-foreground">
            Joined on {referral.join_date}
          </p>
        </div>
        <div className="ml-4 flex items-center space-x-2">
          {isNew && <StarIcon className="h-5 w-5 text-yellow-400" />}
          <Badge
            variant={
              referral.status_key === 'awarded' ? 'default' : 'secondary'
            }
          >
            {referral.status}
          </Badge>
          {referral.status_key === 'pending' && (
            <Button
              onClick={() => onNudge(referral.email)}
              disabled={nudgingEmail === referral.email}
              variant="ghost"
              size="icon"
              className="h-8 w-8"
            >
              {nudgingEmail === referral.email ? (
                <div className="h-4 w-4 animate-spin rounded-full border-2 border-primary border-t-transparent"></div>
              ) : (
                <PaperAirplaneIcon className="h-4 w-4" />
              )}
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default function ReferPage() {
  const { user, loading } = useAuth();
  const [referrals, setReferrals] = useState([]);
  const [isLoadingReferrals, setIsLoadingReferrals] = useState(true);
  const [nudgingEmail, setNudgingEmail] = useState(null);
  const [newlyAwarded, setNewlyAwarded] = useState([]);
  const [nudgeOptions, setNudgeOptions] = useState([]);
  const [isNudgeModalOpen, setIsNudgeModalOpen] = useState(false);
  const [referralLink, setReferralLink] = useState('');
  const [isLinkLoading, setIsLinkLoading] = useState(true);

  useEffect(() => {
    if (typeof window !== 'undefined' && user?.referral_code) {
      const siteUrl = window.location.origin;
      setReferralLink(`${siteUrl}/claim?ref=${user.referral_code}`);
      setIsLinkLoading(false);
    } else if (user && !user.referral_code) {
      setIsLinkLoading(false);
    }
  }, [user]);

  useEffect(() => {
    if (user) {
      const fetchReferrals = async () => {
        setIsLoadingReferrals(true);
        try {
          const data = await getMyReferrals();
          setReferrals(data);

          const awardedEmails = data
            .filter((r) => r.status_key === 'awarded')
            .map((r) => r.email);
          const seenAwarded = JSON.parse(
            localStorage.getItem('seenAwardedReferrals') || '[]'
          );
          const newAwards = awardedEmails.filter(
            (email) => !seenAwarded.includes(email)
          );

          if (newAwards.length > 0) {
            setNewlyAwarded(newAwards);
            localStorage.setItem(
              'seenAwardedReferrals',
              JSON.stringify(awardedEmails)
            );
          }
        } catch (error) {
          showToast('error', 'Error', 'Could not load your referral history.');
        } finally {
          setIsLoadingReferrals(false);
        }
      };
      fetchReferrals();
    }
  }, [user]);

  const handleNudge = async (email) => {
    setNudgingEmail(email);
    triggerHapticFeedback();
    try {
      const data = await getNudgeOptions(email);
      if (data.share_options) {
        setNudgeOptions(data.share_options);
        setIsNudgeModalOpen(true);
      }
    } catch (error) {
      showToast('error', 'Error', error.message);
    } finally {
      setNudgingEmail(null);
    }
  };

  const handleCopy = () => {
    if (isLinkLoading || !referralLink) return;
    triggerHapticFeedback();
    navigator.clipboard.writeText(referralLink);
    showToast('success', 'Copied!', 'Referral link copied to clipboard.');
  };

  const handleShare = async () => {
    if (isLinkLoading || !referralLink) return;
    triggerHapticFeedback();
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Join me on CannaRewards!',
          text: `Sign up for CannaRewards with my link and get a special welcome gift!`,
          url: referralLink,
        });
      } catch (error) {
        console.log('Share failed', error);
      }
    } else {
      handleCopy();
    }
  };

  if (loading || !user) {
    return (
      <PageContainer>
        <DynamicHeader title="Invite & Earn" backLink="/" />
        <ReferralSkeleton />
      </PageContainer>
    );
  }

  return (
    <PageContainer>
      <DynamicHeader title="Invite & Earn" backLink="/" />

      <Card className="mt-4">
        <CardContent className="space-y-6 p-6 text-center">
          <div className="inline-block rounded-lg border bg-white p-4">
            {isLinkLoading ? (
              <Skeleton className="h-[180px] w-[180px]" />
            ) : (
              <QRCodeCanvas
                value={referralLink || 'https://cannarewards.app'}
                size={180}
                level={'H'}
                includeMargin={true}
              />
            )}
          </div>
          <p className="text-muted-foreground">
            Share your unique link. When friends sign up and scan their first
            product, you both earn bonus points!
          </p>
          <div className="relative">
            <Input
              value={
                isLinkLoading
                  ? 'Generating your link...'
                  : referralLink || 'No link available'
              }
              readOnly
              disabled={isLinkLoading}
              className="pr-12"
            />
            <div className="absolute right-1 top-1/2 -translate-y-1/2">
              <motion.div whileTap={{ scale: 1.0 }}>
                <Button
                  onClick={handleCopy}
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-muted-foreground"
                  disabled={isLinkLoading || !referralLink}
                >
                  <ClipboardDocumentIcon className="h-5 w-5" />
                </Button>
              </motion.div>
            </div>
          </div>
          <Button
            onClick={handleShare}
            className="text-md h-12 w-full"
            disabled={isLinkLoading || !referralLink}
          >
            <ShareIcon className="mr-2 h-5 w-5" />
            Share My Link
          </Button>
        </CardContent>
      </Card>

      {!isLoadingReferrals && <ReferralStats referrals={referrals} />}
      <Separator className="my-8" />
      <h2 className="text-2xl font-bold text-foreground">My Referrals</h2>

      {isLoadingReferrals ? (
        <div className="mt-4 space-y-3">
          <ReferralSkeleton />
          <ReferralSkeleton />
          <ReferralSkeleton />
        </div>
      ) : referrals.length > 0 ? (
        <StaggeredList className="mt-4 space-y-3">
          {referrals.map((ref) => (
            <ReferralListItem
              key={ref.email}
              referral={ref}
              onNudge={handleNudge}
              nudgingEmail={nudgingEmail}
              isNew={newlyAwarded.includes(ref.email)}
            />
          ))}
        </StaggeredList>
      ) : (
        <div className="mt-6 rounded-lg bg-secondary p-6 text-center">
          <p className="text-muted-foreground">
            You haven't referred any friends yet. Share your link to start
            earning!
          </p>
        </div>
      )}

      <Dialog open={isNudgeModalOpen} onOpenChange={setIsNudgeModalOpen}>
        {isNudgeModalOpen && (
          <NudgeOptionsModal
            options={nudgeOptions}
            closeModal={() => setIsNudgeModalOpen(false)}
          />
        )}
      </Dialog>
    </PageContainer>
  );
}
</file>

<file path="src/components/Dashboard.js">
'use client';

import { useAuth } from '../context/AuthContext';
import DashboardSkeleton from './DashboardSkeleton';
import PageContainer from './PageContainer';
import StatusCard from './dashboard/StatusCard';
import ActionCard from './dashboard/ActionCard';
import NextActionCarousel from './dashboard/NextActionCarousel';

/**
 * The main user dashboard, refactored to be a "Mission Control" hub.
 * It assembles modular cards to present a user-centric view of their status and actions.
 */
export default function Dashboard() {
  const { user, loading } = useAuth();

  // Show a skeleton while the user data is loading to prevent layout shifts.
  if (loading || !user) {
    return <DashboardSkeleton />;
  }

  return (
    // We use PageContainer to ensure consistent padding and safe-area handling,
    // matching the rest of the authenticated app experience.
    <PageContainer>
        <div className="space-y-6">
            {/* 1. The user's current status, at the top */}
            <StatusCard user={user} />

            {/* 2. The primary actions, right below for immediate access */}
            <ActionCard />

            {/* 3. The dynamic, personalized suggestions carousel */}
            <NextActionCarousel user={user} />
        </div>
    </PageContainer>
  );
}
</file>

<file path="src/services/rewardsService.js">
import api from '@/utils/axiosConfig';

const API_BASE_V2 = `${process.env.NEXT_PUBLIC_API_URL}/wp-json/rewards/v2`;

/**
 * Fetches a preview of the welcome reward for unauthenticated users.
 */
export const getWelcomeRewardPreview = async () => {
  try {
    // This is a public endpoint, no auth needed.
    const response = await api.get(`${API_BASE_V2}/unauthenticated/welcome-reward-preview`);
    return response.data;
  } catch (error) {
    // A specific error is more helpful for debugging on the frontend.
    throw new Error('Could not load the welcome reward preview.');
  }
};

/**
 * Submits a scanned QR code to the backend for validation and processing.
 */
export const claimCodeV2 = async (code) => {
  try {
    const response = await api.post(`${API_bASE_V2}/actions/claim`, { code });
    return response.data.data; // Unwrap the data property
  } catch (error) {
    throw new Error(
      error.response?.data?.message || 'Failed to claim this code.'
    );
  }
};

/**
 * Submits a redemption request for a product using points.
 */
export const redeemRewardV2 = async (productId, shippingDetails) => {
  try {
    const response = await api.post(`${API_BASE_V2}/actions/redeem`, {
      productId,
      shippingDetails,
    });
    return response.data.data; // Unwrap the data property
  } catch (error) {
    throw new Error(
      error.response?.data?.message || 'Failed to redeem reward.'
    );
  }
};

/**
 * Fetches the user's point transaction history from the v2 endpoint.
 */
export const getPointHistoryV2 = async () => {
  try {
    const response = await api.get(`${API_BASE_V2}/users/me/history`);
    // --- FIX: Unwrap the 'data' and then the 'history' property ---
    return response.data.data.history;
  } catch (error) {
    throw new Error('Could not fetch point history.');
  }
};

/**
 * Fetches the user's order history from the v2 endpoint.
 */
export const getMyOrdersV2 = async () => {
  try {
    const response = await api.get(`${API_BASE_V2}/users/me/orders`);
    // --- FIX: Unwrap the 'data' and then the 'orders' property ---
    return response.data.data.orders;
  } catch (error) {
    throw new Error('Could not fetch order history.');
  }
};
</file>

<file path="src/context/ModalContext.js">
'use client';

import React, { createContext, useState, useContext } from 'react';
import { AnimatePresence } from 'framer-motion';
import WelcomeModal from '@/components/WelcomeModal';
import ConfettiBlast from '@/components/ConfettiBlast';
import EditProfileModal from '@/components/EditProfileModal';
import ContentModal from '@/components/ContentModal';
import ReportFailedScanModal from '@/components/ReportFailedScanModal';
import RankUpModal from '@/components/RankUpModal';
import AchievementUnlockedModal from '@/components/AchievementUnlockedModal';
import { Dialog } from '@/components/ui/dialog';
import { useAuth } from './AuthContext';

const ModalContext = createContext();

export function ModalProvider({ children }) {
  const [welcomeBonusDetails, setWelcomeBonusDetails] = useState(null);
  const [showConfetti, setShowConfetti] = useState(false);
  const [isEditProfileOpen, setIsEditProfileOpen] = useState(false);
  const [contentModalSlug, setContentModalSlug] = useState(null);
  const [isReportScanOpen, setIsReportScanOpen] = useState(false);
  const [failedScanCode, setFailedScanCode] = useState(null);
  const [rankUpDetails, setRankUpDetails] = useState(null);
  const [achievementDetails, setAchievementDetails] = useState(null);

  const { login } = useAuth();

  const openWelcomeModal = (details) => setWelcomeBonusDetails(details);
  const closeWelcomeModal = () => setWelcomeBonusDetails(null);

  const openEditProfileModal = () => setIsEditProfileOpen(true);
  const closeEditProfileModal = () => setIsEditProfileOpen(false);

  const openContentModal = (slug) => setContentModalSlug(slug);
  const closeContentModal = () => setContentModalSlug(null);

  const openReportScanModal = (code) => {
    setFailedScanCode(code);
    setIsReportScanOpen(true);
  };
  const closeReportScanModal = () => setIsReportScanOpen(false);

  const openRankUpModal = (details) => setRankUpDetails(details);
  const closeRankUpModal = () => setRankUpDetails(null);

  const openAchievementModal = (details) => setAchievementDetails(details);
  const closeAchievementModal = () => setAchievementDetails(null);

  const handleProfileUpdate = () => {
    const currentToken = localStorage.getItem('authToken');
    if (currentToken) {
      login(currentToken, true);
    }
  };

  const triggerConfetti = () => {
    setShowConfetti(true);
    setTimeout(() => setShowConfetti(false), 4000);
  };

  const value = {
    triggerConfetti,
    openWelcomeModal,
    closeWelcomeModal,
    openEditProfileModal,
    closeEditProfileModal,
    openContentModal,
    closeContentModal,
    openReportScanModal,
    openRankUpModal,
    openAchievementModal,
    closeAchievementModal,
  };

  return (
    <ModalContext.Provider value={value}>
      {children}
      {showConfetti && <ConfettiBlast />}

      <AnimatePresence>
        {welcomeBonusDetails && (
          <WelcomeModal
            bonusDetails={welcomeBonusDetails}
            closeModal={closeWelcomeModal}
          />
        )}
        {rankUpDetails && (
          <RankUpModal details={rankUpDetails} closeModal={closeRankUpModal} />
        )}
      </AnimatePresence>

      {achievementDetails && (
        <AchievementUnlockedModal
          details={achievementDetails}
          closeModal={closeAchievementModal}
        />
      )}

      <Dialog open={isEditProfileOpen} onOpenChange={setIsEditProfileOpen}>
        {isEditProfileOpen && (
          <EditProfileModal
            closeModal={closeEditProfileModal}
            onProfileUpdate={handleProfileUpdate}
          />
        )}
      </Dialog>
      <Dialog
        open={!!contentModalSlug}
        onOpenChange={(isOpen) => !isOpen && closeContentModal()}
      >
        {contentModalSlug && (
          <ContentModal
            pageSlug={contentModalSlug}
            closeModal={closeContentModal}
          />
        )}
      </Dialog>
      <Dialog open={isReportScanOpen} onOpenChange={setIsReportScanOpen}>
        {isReportScanOpen && (
          <ReportFailedScanModal
            failedCode={failedScanCode}
            closeModal={closeReportScanModal}
          />
        )}
      </Dialog>
    </ModalContext.Provider>
  );
}

export function useModal() {
  return useContext(ModalContext);
}
</file>

<file path="src/app/claim/page.js">
'use client';

import { useEffect, useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';
import { useModal } from '@/context/ModalContext';
import { getWelcomeRewardPreview, claimCodeV2 } from '@/services/rewardsService';
import { getReferralGift } from '@/services/referralService';
import RegisterForm from '@/components/RegisterForm';
import ImageWithLoader from '@/components/ImageWithLoader';

// Component specifically for referral signups (No changes needed here)
function ReferralWelcome({ gift, onRegister }) {
    // ... (JSX remains the same)
    return (
        <div className="text-center w-full max-w-sm px-4">
            <div className="mb-6">
                <img src="/logo.png" alt="CannaRewards Logo" width={80} height={80} className="mx-auto" />
            </div>
            <h1 className="text-2xl font-bold text-gray-800 mb-2">You've Been Invited!</h1>
            <p className="text-gray-600 mb-6">Create an account to join and claim your free welcome gift.</p>
            
            {gift && (
                <div className="bg-white p-6 rounded-lg shadow-md mb-6">
                    <div className="w-full aspect-square bg-gray-100 rounded-lg overflow-hidden mb-4">
                        <ImageWithLoader src={gift.image} alt={gift.name} className="w-full h-full object-cover" />
                    </div>
                    <p className="text-xs text-gray-500">YOUR WELCOME GIFT</p>
                    <p className="text-xl font-semibold text-gray-900">{gift.name}</p>
                </div>
            )}
            
            <button
                onClick={onRegister}
                className="w-full bg-primary text-white font-bold py-4 px-6 rounded-lg text-lg transform hover:scale-105 transition-transform"
            >
                Create Account to Claim
            </button>
        </div>
    );
}


// Component for scan-first signups (No changes needed here)
function UnauthenticatedWelcome({ reward, onRegister }) {
    // ... (JSX remains the same)
    if (!reward) {
        return (
            <div className="w-full max-w-sm text-center animate-pulse">
                <div className="bg-gray-200 rounded-lg w-full aspect-square mb-6"></div>
                <div className="h-8 bg-gray-300 rounded-md w-3/4 mx-auto mb-4"></div>
                <div className="h-6 bg-gray-200 rounded-md w-1/2 mx-auto"></div>
            </div>
        );
    }

    return (
        <div className="text-center w-full max-w-sm px-4">
            <h1 className="text-2xl font-bold text-gray-800 mb-2">You've Unlocked a Reward!</h1>
            <p className="text-gray-600 mb-6">Create an account to claim your reward and start earning.</p>
            
            <div className="bg-white p-6 rounded-lg shadow-md mb-6">
                <div className="w-full aspect-square bg-gray-100 rounded-lg overflow-hidden mb-4">
                    <ImageWithLoader src={reward.image} alt={reward.name} className="w-full h-full object-cover" />
                </div>
                <p className="text-xl font-semibold text-gray-900">{reward.name}</p>
            </div>

            <button
                onClick={onRegister}
                className="w-full bg-primary text-white font-bold py-4 px-6 rounded-lg text-lg transform hover:scale-105 transition-transform"
            >
                Create Account to Claim
            </button>
        </div>
    );
}


function ClaimProcessor() {
    const router = useRouter();
    const searchParams = useSearchParams();
    const { isAuthenticated, loading: authLoading, login } = useAuth();
    const { triggerConfetti } = useModal();

    const [status, setStatus] = useState('initializing');
    const [rewardPreview, setRewardPreview] = useState(null);
    const [referralGift, setReferralGift] = useState(null);
    const [errorMessage, setErrorMessage] = useState('');
    
    const code = searchParams.get('code');
    const refCode = searchParams.get('ref');

    useEffect(() => {
        if (refCode) {
            localStorage.setItem('referralCode', refCode);
        }

        if (authLoading) {
            setStatus('authenticating');
            return;
        }

        if (isAuthenticated) {
            if (code) {
                setStatus('claiming');
                claimForAuthenticatedUser(code);
            }
        } else {
            if (code) {
                setStatus('unauthenticated');
                fetchRewardPreview();
            } else if (refCode) {
                setStatus('unauthenticated');
                fetchReferralGift();
            } else {
                setStatus('error');
                setErrorMessage('No claim code or referral code provided in the URL.');
            }
        }
    }, [code, refCode, authLoading, isAuthenticated]);

    const fetchRewardPreview = async () => {
        try {
            const data = await getWelcomeRewardPreview();
            setRewardPreview(data);
        } catch (err) {
            console.error("Failed to fetch reward preview:", err);
            setStatus('error');
            setErrorMessage('This reward is not available. Please contact support.');
        }
    };

    const fetchReferralGift = async () => {
        try {
            const data = await getReferralGift();
            setReferralGift(data);
        } catch (err) {
            console.error("Failed to fetch referral gift:", err);
        }
    };

    const claimForAuthenticatedUser = async (claimCode) => {
        try {
            const responseData = await claimCodeV2(claimCode);
            
            // Refreshes the user data in the AuthContext to get the new point total
            await login(localStorage.getItem('authToken'), true);
            setStatus('success');
            
            const firstScanEvent = responseData.triggered_events?.find(e => e.type === 'first_scan_bonus');
            
            if (firstScanEvent) {
                triggerConfetti();
                router.push(`/catalog/${firstScanEvent.details.rewardProductId}?first_scan=true`);
            } else {
                router.push('/my-points');
            }

        } catch (err) {
            setStatus('error');
            setErrorMessage(err.message || 'Failed to claim this code.');
        }
    };
    
    // (The rest of the component's JSX remains unchanged)
    
    if (isAuthenticated && !code && status !== 'claiming') {
        return (
            <div className="text-center p-8 bg-white rounded-lg shadow-md">
                <h1 className="text-2xl font-bold mb-4 text-gray-800">Invalid Page</h1>
                <p className="text-lg text-gray-700">Please scan a product QR code to claim a reward.</p>
                <button 
                    onClick={() => router.push('/')}
                    className="mt-8 py-2 px-6 bg-primary hover:opacity-90 text-white font-semibold rounded-lg"
                >
                    Go to Dashboard
                </button>
            </div>
        );
    }
    
    if (status === 'error') {
        return (
            <div className="text-center p-8 bg-white rounded-lg shadow-md">
                <h1 className="text-2xl font-bold mb-4 text-red-600">Claim Failed</h1>
                <p className="text-lg text-gray-700">{errorMessage}</p>
                <button 
                    onClick={() => router.push('/')}
                    className="mt-8 py-2 px-6 bg-primary hover:opacity-90 text-white font-semibold rounded-lg"
                >
                    Go to Dashboard
                </button>
            </div>
        );
    }
    
    if (status === 'unauthenticated') {
        if (refCode && !code) {
            return <ReferralWelcome gift={referralGift} onRegister={() => setStatus('registering')} />;
        }
        return <UnauthenticatedWelcome reward={rewardPreview} onRegister={() => setStatus('registering')} />;
    }

    if (status === 'registering') {
        return (
            <div className="w-full max-w-sm bg-white p-8 rounded-lg shadow-md">
                <RegisterForm 
                    claimCode={code} 
                    rewardPreview={referralGift || rewardPreview} 
                />
            </div>
        );
    }

    if (status === 'initializing' || status === 'authenticating' || status === 'claiming' || status === 'success') {
        return (
            <div className="text-center p-8">
                <h1 className="text-2xl font-bold mb-4">Processing...</h1>
                <p className="text-gray-600">Please wait a moment.</p>
            </div>
        );
    }

    return null; 
}

export default function ClaimPage() {
    return (
        <main className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
            <Suspense fallback={<div className="text-center p-8">Loading...</div>}>
                <ClaimProcessor />
            </Suspense>
        </main>
    );
}
</file>

<file path="src/app/profile/page.js">
'use client';

import { useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useModal } from '../../context/ModalContext'; 
import { useRouter } from 'next/navigation';
import MenuItem from '../../components/MenuItem';
import { motion } from 'framer-motion';
import AnimatedPage from '../../components/AnimatedPage';

export default function ProfilePage() {
    const { user, logout, isAuthenticated, loading } = useAuth();
    const { openEditProfileModal, openContentModal } = useModal(); 
    const router = useRouter();

    useEffect(() => {
        if (!loading && !isAuthenticated) {
            router.push('/');
        }
    }, [isAuthenticated, loading, router]);

    if (loading || !isAuthenticated) {
        return (
            <div className="p-4 bg-white min-h-screen animate-pulse">
                <div className="w-full max-w-md mx-auto">
                    <div className="flex flex-col items-center p-4 mb-6 text-center">
                        <div className="w-24 h-24 bg-gray-200 rounded-full mb-4"></div>
                        <div className="h-8 bg-gray-300 rounded-md w-1/2 mb-2"></div>
                        <div className="h-6 bg-gray-200 rounded-md w-3/4"></div>
                    </div>
                    <div className="rounded-lg h-36 bg-gray-200 mb-4"></div>
                    <div className="rounded-lg h-24 bg-gray-200 mb-6"></div>
                    <div className="rounded-lg h-14 bg-gray-200"></div>
                </div>
            </div>
        );
    }

    const userInitial = user.firstName ? user.firstName.charAt(0).toUpperCase() : (user.email ? user.email.charAt(0).toUpperCase() : 'U');

    return (
        <AnimatedPage>
            {/* --- MODIFIED: Changed <main> to <div> --- */}
            <div 
              className="p-4 bg-white min-h-screen"
              style={{
                paddingTop: `env(safe-area-inset-top)`,
                paddingBottom: `calc(5rem + env(safe-area-inset-bottom))` 
              }}
            >
              <div className="w-full max-w-md mx-auto">
                    <motion.div 
                        className="flex flex-col items-center p-4 mb-6 text-center"
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5, ease: 'easeOut' }}
                    >
                        <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center text-4xl font-bold text-gray-700 mb-4 border">
                            {userInitial}
                        </div>
                        <h1 className="text-2xl font-bold capitalize text-gray-900">{user.firstName || 'User'} {user.lastName || ''}</h1>
                        <p className="text-base text-gray-500">{user.email}</p>
                    </motion.div>
                    
                    <div className="rounded-lg shadow-sm overflow-hidden mb-4 border border-gray-200">
                        <MenuItem onClick={openEditProfileModal} label="Edit Profile" />
                        <MenuItem href="/history" label="Point History" />
                        <MenuItem href="/orders" label="My Orders" />
                    </div>

                    <div className="rounded-lg shadow-sm overflow-hidden mb-4 border border-gray-200">
                        <MenuItem href="/settings" label="Settings" />
                        <MenuItem onClick={() => openContentModal('terms-and-conditions')} label="Terms and Conditions" />
                        <MenuItem onClick={() => openContentModal('support')} label="Support" />
                    </div>
                    
                    <div className="rounded-lg shadow-sm overflow-hidden mt-6 border border-gray-200">
                         <button 
                            onClick={logout} 
                            className="bg-white p-4 w-full flex justify-between items-center text-left hover:bg-gray-50 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-red-500"
                        >
                            <span className="text-red-500 font-medium">Log Out</span>
                            <span className="text-red-400">{'>'}</span>
                        </button>
                    </div>
                </div>
            </div>
        </AnimatedPage>
    );
}
</file>

<file path="src/context/AuthContext.js">
'use client';

import {
  createContext,
  useState,
  useContext,
  useEffect,
  useCallback,
} from 'react';
import api from '../utils/axiosConfig';
import { getUserSession } from '@/services/authService';

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [loading, setLoading] = useState(true);

  const fetchUserSession = useCallback(async () => {
    try {
      const userData = await getUserSession();
      setUser(userData);
    } catch (error) {
      console.error('AuthContext Error:', error.message);
      logout();
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    const initializeAuth = () => {
      const storedToken = localStorage.getItem('authToken');
      if (storedToken) {
        setToken(storedToken);
        api.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;
        fetchUserSession();
      } else {
        setLoading(false);
      }
    };
    initializeAuth();
  }, [fetchUserSession]);

  const login = (newToken, silent = false) => {
    localStorage.setItem('authToken', newToken);
    setToken(newToken);
    api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
    if (!silent) {
      setLoading(true);
    }
    fetchUserSession();
  };

  const logout = () => {
    localStorage.removeItem('authToken');
    setToken(null);
    setUser(null);
    delete api.defaults.headers.common['Authorization'];
  };

  const updateUserPoints = (newBalance) => {
    if (user) {
      setUser((prevUser) => ({ ...prevUser, points_balance: newBalance }));
    }
  };

  const value = {
    user,
    token,
    login,
    logout,
    isAuthenticated: !!user,
    loading,
    updateUserPoints,
    setUser,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  return useContext(AuthContext);
}
</file>

<file path="src/components/NavBar.js">
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useAuth } from '../context/AuthContext';
import { motion } from 'framer-motion';
import { triggerHapticFeedback } from '@/utils/haptics';
import { 
    HomeIcon, 
    CircleStackIcon, 
    QrCodeIcon as ScanOutline, 
    TrophyIcon,
    UserIcon
} from '@heroicons/react/24/outline'; // --- 1. USE OUTLINE FOR ALL ---
import { 
    HomeIcon as HomeSolid, 
    CircleStackIcon as CatalogSolid, 
    TrophyIcon as RewardsSolid,
    UserIcon as UserSolid
} from '@heroicons/react/24/solid'; // --- 2. USE SOLID FOR ALL ACTIVE ---

function NavItem({ href, label, IconOutline, IconSolid }) {
    const pathname = usePathname();
    const isActive = href === '/' ? pathname === href : pathname.startsWith(href);
    const Icon = isActive ? IconSolid : IconOutline;
    const textStyle = isActive ? 'text-primary font-semibold' : 'text-gray-500';

    return (
        <Link 
            href={href} 
            onClick={triggerHapticFeedback}
            className={`flex-1 flex flex-col items-center justify-center p-2 rounded-lg transition-colors ${textStyle}`}
        >
            <motion.div whileTap={{ scale: 0.9 }} className="text-center">
                <Icon className="h-6 w-6 mb-1 mx-auto" />
                <span className="text-xs">{label}</span>
            </motion.div>
        </Link>
    );
}

export default function NavBar() {
    const { isAuthenticated } = useAuth();
    if (!isAuthenticated) { return null; }

    return (
        <nav 
          className="fixed bottom-0 left-0 right-0 h-20 z-20"
          style={{ paddingBottom: 'env(safe-area-inset-bottom)' }}
        >
            <div className="relative max-w-md mx-auto h-full">
                <div className="absolute bottom-0 left-0 right-0 h-16 bg-white shadow-[0_-2px_10px_rgba(0,0,0,0.05)] flex justify-around items-center">
                    <div className="flex-1 flex justify-around">
                        {/* --- 3. UPDATED TO USE CONSISTENT ICONS --- */}
                        <NavItem href="/" label="Home" IconOutline={HomeIcon} IconSolid={HomeSolid} />
                        <NavItem href="/catalog" label="Catalog" IconOutline={CircleStackIcon} IconSolid={CatalogSolid} />
                    </div>

                    <div className="w-20"></div> 

                    <div className="flex-1 flex justify-around">
                        {/* --- 4. UPDATED TO USE CONSISTENT ICONS --- */}
                        <NavItem href="/my-points" label="My Points" IconOutline={TrophyIcon} IconSolid={RewardsSolid} />
                        <NavItem href="/profile" label="Profile" IconOutline={UserIcon} IconSolid={UserSolid} />
                    </div>
                </div>

                <Link href="/scan" onClick={triggerHapticFeedback} className="absolute bottom-4 left-1/2 -translate-x-1/2 z-30">
                    <motion.div 
                        whileTap={{ scale: 0.95 }}
                        className="w-16 h-16 bg-primary rounded-full flex items-center justify-center shadow-lg text-white"
                    >
                        <ScanOutline className="w-8 h-8" />
                    </motion.div>
                </Link>
            </div>
        </nav>
    );
}
</file>

<file path="src/app/catalog/page.js">
'use client';

import { useEffect, useState, useMemo } from 'react';
import { useAuth } from '@/context/AuthContext';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { getProducts } from '@/services/woocommerceService';
import CatalogSkeleton from '@/components/CatalogSkeleton';
import ImageWithLoader from '@/components/ImageWithLoader';
import PageContainer from '@/components/PageContainer';
import StaggeredList from '@/components/StaggeredList';
import EmptyState from '@/components/EmptyState';
import { MagnifyingGlassIcon, PlusIcon, XMarkIcon, LockClosedIcon, LightBulbIcon, CircleStackIcon } from '@heroicons/react/24/outline';
import { cn } from "@/components/lib/utils";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { AspectRatio } from "@/components/ui/aspect-ratio";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";

function ProductCard({ product, user }) {
    const imageUrl = product.images?.[0]?.src || 'https://via.placeholder.com/300';
    const userRankData = user?.rank || {};
    const allRanks = user?.allRanks || {};
    const userRankPoints = allRanks[userRankData.key]?.points ?? 0;
    const requiredRankPoints = allRanks[product.tierRequired]?.points ?? 0;
    const isLocked = product.tierRequired && userRankPoints < requiredRankPoints;
    
    const Wrapper = isLocked ? 'div' : Link;
    const wrapperProps = isLocked ? {} : { href: `/catalog/${product.id}` };

    return (
        <Wrapper {...wrapperProps} className="block group">
            <Card className={cn("overflow-hidden h-full flex flex-col", isLocked && "bg-gray-50 opacity-60")}>
                <CardContent className="p-0 flex-grow"><div className="relative"><AspectRatio ratio={1 / 1}><ImageWithLoader src={imageUrl} alt={product.name} className={cn("w-full h-full object-cover transition-transform duration-300 ease-in-out", !isLocked && "group-hover:scale-105")} />{isLocked && <div className="absolute inset-0 bg-white/30 backdrop-blur-[2px]"></div>}</AspectRatio>{product.tierRequired && (<Badge variant={isLocked ? "outline" : "secondary"} className="absolute top-2 left-2 bg-white/80"><LockClosedIcon className="w-3 h-3 mr-1.5" />{allRanks[product.tierRequired]?.name || product.tierRequired} Tier</Badge>)}{!isLocked && (<div className="absolute bottom-2 right-2 bg-primary text-primary-foreground w-8 h-8 rounded-full flex items-center justify-center transform group-hover:scale-110 transition-transform shadow-lg"><PlusIcon className="w-5 h-5" /></div>)}</div></CardContent>
                <CardFooter className="p-3 flex-col items-start"><h3 className="text-sm font-medium truncate text-foreground w-full">{product.name}</h3><p className="text-base font-semibold text-foreground">{product.points_cost} Points</p></CardFooter>
            </Card>
        </Wrapper>
    );
}

export default function CatalogPage() {
    const { user, isAuthenticated, loading: authLoading } = useAuth();
    const router = useRouter();
    const [allProducts, setAllProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [searchTerm, setSearchTerm] = useState('');

    useEffect(() => {
        if (!authLoading && !isAuthenticated) { router.push('/'); return; }
        if (isAuthenticated && user) {
            const fetchProducts = async () => {
                try {
                    const productsFromApi = await getProducts();
                    const formattedProducts = productsFromApi.map(p => ({ id: p.id, name: p.name, images: p.images, points_cost: p.meta_data.find(meta => meta.key === 'points_cost') ? parseInt(p.meta_data.find(meta => meta.key === 'points_cost').value) : null, tierRequired: p.meta_data.find(meta => meta.key === '_required_rank')?.value || null })).filter(p => p.points_cost !== null);
                    setAllProducts(formattedProducts); setFilteredProducts(formattedProducts);
                } catch (err) { setError(err.message || 'Could not load rewards. Please try again later.'); } finally { setLoading(false); }
            };
            fetchProducts();
        }
    }, [isAuthenticated, authLoading, router, user]);
    
    useEffect(() => {
        if (searchTerm === '') { setFilteredProducts(allProducts); } else { const filtered = allProducts.filter(product => product.name.toLowerCase().includes(searchTerm.toLowerCase())); setFilteredProducts(filtered); }
    }, [searchTerm, allProducts]);

    const nextBestReward = useMemo(() => {
        if (!user || !user.eligibleRewards || user.points === undefined) return null;
        let bestCandidate = null;
        let smallestDifference = Infinity;
        user.eligibleRewards.forEach(reward => {
            if (reward.points_cost > user.points) {
                const difference = reward.points_cost - user.points;
                if (difference < smallestDifference) { smallestDifference = difference; bestCandidate = reward; }
            }
        });
        return bestCandidate ? { ...bestCandidate, pointsNeeded: smallestDifference } : null;
    }, [user]);

    if (authLoading || loading || !user) { return <CatalogSkeleton />; }

    const renderEmptyState = () => {
        if (searchTerm) {
            return (
                <div className="text-center mt-8">
                    <EmptyState Icon={MagnifyingGlassIcon} title={`No results for "${searchTerm}"`} message="Try a different search term or check out our suggestion for you." />
                    {nextBestReward && (
                        <div className="mt-8">
                            <h3 className="text-lg font-semibold text-foreground mb-4 flex items-center justify-center gap-2"><LightBulbIcon className="w-6 h-6 text-yellow-500" /> Suggestion For You</h3>
                            <div className="max-w-xs mx-auto"><ProductCard product={nextBestReward} user={user} /><p className="text-sm text-muted-foreground mt-2">You're only {nextBestReward.pointsNeeded.toLocaleString()} points away!</p></div>
                        </div>
                    )}
                </div>
            );
        }
        return <EmptyState Icon={CircleStackIcon} title="No Rewards Available" message="We're busy adding new items to the catalog. Please check back soon!" />;
    };
    
    return (
        <PageContainer>
            <div className="relative mb-6"><MagnifyingGlassIcon className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" /><Input type="text" placeholder="Search for rewards" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full bg-secondary border-none pl-10 pr-10" />{searchTerm && (<XMarkIcon className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground cursor-pointer" onClick={() => setSearchTerm('')} />)}</div>
            {error && <p className="text-destructive text-center">{error}</p>}
            {!error && filteredProducts.length === 0 ? renderEmptyState() : (
                <StaggeredList className="grid grid-cols-2 gap-4">
                    {filteredProducts.map(product => ( <ProductCard key={product.id} product={product} user={user} /> ))}
                </StaggeredList>
            )}
        </PageContainer>
    );
}
</file>

<file path="src/app/history/page.js">
'use client';

import { useEffect, useState, useCallback } from 'react';
import { useAuth } from '@/context/AuthContext';
import { useRouter } from 'next/navigation';
import { getPointHistoryV2 } from '@/services/rewardsService';
import EmptyState from '@/components/EmptyState';
import DynamicHeader from '@/components/DynamicHeader';
import StaggeredList from '@/components/StaggeredList';
import { ClipboardDocumentListIcon } from '@heroicons/react/24/outline';
import { Card, CardContent } from '@/components/ui/card';
import PullToRefresh from 'react-simple-pull-to-refresh';
import { Skeleton } from '@/components/ui/skeleton';

const HistorySkeleton = () => (
  <div className="space-y-3">
    <Skeleton className="h-16 w-full rounded-lg" />
    <Skeleton className="h-16 w-full rounded-lg" />
    <Skeleton className="h-16 w-full rounded-lg" />
    <Skeleton className="h-16 w-full rounded-lg" />
    <Skeleton className="h-16 w-full rounded-lg" />
  </div>
);

export default function HistoryPage() {
  const { isAuthenticated, loading: authLoading } = useAuth();
  const router = useRouter();
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchHistory = useCallback(async () => {
    if (!isAuthenticated) return; // Don't fetch if not authenticated
    setLoading(true);
    try {
      const historyData = await getPointHistoryV2();
      // --- START FIX ---
      // Validate that the API response is an array before setting state.
      if (Array.isArray(historyData)) {
        setHistory(historyData);
      } else {
        console.warn('API did not return an array for history:', historyData);
        setHistory([]); // Default to an empty array to prevent crashes.
      }
      // --- END FIX ---
    } catch (error) {
      console.error('Failed to fetch history:', error);
      setHistory([]); // Also ensure state is an empty array on error.
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated]);

  useEffect(() => {
    if (!authLoading && !isAuthenticated) {
      router.push('/');
      return;
    }
    if (isAuthenticated) {
      fetchHistory();
    }
  }, [isAuthenticated, authLoading, router, fetchHistory]);

  const handleRefresh = async () => {
    await fetchHistory();
  };

  const renderContent = () => {
    if (loading || authLoading) {
      return <HistorySkeleton />;
    }
    if (history.length > 0) {
      return (
        <StaggeredList className="space-y-3">
          {history.map((item, index) => (
            <Card key={index}>
              <CardContent className="flex items-center justify-between p-4">
                <div>
                  <p className="font-semibold text-card-foreground">
                    {item.description}
                  </p>
                  <p className="text-sm text-muted-foreground">
                    {new Date(item.log_date.replace(' ', 'T')).toLocaleString()}
                  </p>
                </div>
                <span
                  className={`text-lg font-bold ${
                    item.points >= 0 ? 'text-green-500' : 'text-red-500'
                  }`}
                >
                  {item.points >= 0 ? `+${item.points}` : item.points}
                </span>
              </CardContent>
            </Card>
          ))}
        </StaggeredList>
      );
    }
    return (
      <EmptyState
        Icon={ClipboardDocumentListIcon}
        title="No Points History Yet"
        message="Start scanning products to see your point activity appear here."
        buttonLabel="Make Your First Scan"
        buttonHref="/scan"
      />
    );
  };

  return (
    <PullToRefresh onRefresh={handleRefresh}>
      <div className="min-h-screen bg-white">
        <div className="mx-auto w-full max-w-md">
          <div className="sticky top-0 z-10 border-b border-gray-200 bg-white px-4 pt-4">
            <DynamicHeader title="Point History" backLink="/profile" />
          </div>
          <div className="p-4" style={{ paddingBottom: '5rem' }}>
            {renderContent()}
          </div>
        </div>
      </div>
    </PullToRefresh>
  );
}
</file>

<file path="src/app/layout.js">
'use client';

import { Inter } from 'next/font/google';
import { AuthProvider } from '../context/AuthContext';
import { ModalProvider } from '../context/ModalContext';
import { ThemeProvider } from '../context/ThemeContext';
import { OnboardingProvider } from '../context/OnboardingContext';
import { ConfigProvider } from '../context/ConfigContext';
import NavBar from '../components/NavBar';
import Header from '../components/Header';
import AppEventHandler from '@/components/AppEventHandler';
import FloatingOnboardingBanner from '@/components/FloatingOnboardingBanner';
import { Toaster } from 'react-hot-toast';
import 'nprogress/nprogress.css';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

const nProgressStyle = `
  #nprogress .bar {
    background: var(--primary-color, #2563eb) !important;
    height: 3px !important;
  }
  #nprogress .peg {
    box-shadow: 0 0 10px var(--primary-color, #2563eb), 0 0 5px var(--primary-color, #2563eb) !important;
  }
`;

export default function RootLayout({ children }) {
  const themeColor = '#2563eb';

  return (
    <html lang="en">
      <head>
        <title>CannaRewards</title>

        <meta name="application-name" content="CannaRewards" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
        <meta name="apple-mobile-web-app-title" content="CannaRewards" />
        <meta
          name="description"
          content="Scan products, earn points, and redeem exclusive rewards."
        />
        <meta name="format-detection" content="telephone=no" />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="msapplication-config" content="/icons/browserconfig.xml" />
        <meta name="msapplication-TileColor" content={themeColor} />
        <meta name="msapplication-tap-highlight" content="no" />
        <meta name="theme-color" content={themeColor} />
        <meta
          name="viewport"
          content="minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no, user-scalable=no, viewport-fit=cover"
        />
        <link rel="manifest" href="/manifest.json" />
        <link rel="apple-touch-icon" href="/icons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="/favicon.ico" />
        <style>{nProgressStyle}</style>
      </head>
      <body
        className={`${inter.className} bg-gray-50`}
        suppressHydrationWarning={true}
      >
        <AuthProvider>
          <ConfigProvider>
            <ThemeProvider>
              <OnboardingProvider>
                <ModalProvider>
                  <AppEventHandler />
                  <Toaster />
                  <Header />
                  <main>{children}</main>
                  {/* --- START FIX: Comment out the banner --- */}
                  {/* <FloatingOnboardingBanner /> */}
                  {/* --- END FIX --- */}
                  <NavBar />
                </ModalProvider>
              </OnboardingProvider>
            </ThemeProvider>
          </ConfigProvider>
        </AuthProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/my-points/page.js">
'use client';

import { useAuth } from '@/context/AuthContext';
import { useConfig } from '@/context/ConfigContext';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import MyPointsSkeleton from '@/components/MyPointsSkeleton';
import AnimatedProgressBar from '@/components/AnimatedProgressBar';
import AnimatedCounter from '@/components/AnimatedCounter';
import PageContainer from '@/components/PageContainer';
import ReferralCard from '@/components/dashboard/ReferralCard';
import { calculateRankProgress } from '@/utils/rankCalculations';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ChevronRightIcon } from '@heroicons/react/24/solid';
import PullToRefresh from 'react-simple-pull-to-refresh';
import { useEffect, useState } from 'react';
import { getDashboardData } from '@/services/dashboardService';
import { Skeleton } from '@/components/ui/skeleton';

export default function MyPointsPage() {
  const { user, login, isAuthenticated, loading: authLoading } = useAuth();
  const { allRanks, settings, loading: configLoading } = useConfig();
  const router = useRouter();

  const [dashboardData, setDashboardData] = useState(null);
  const [dashboardLoading, setDashboardLoading] = useState(true);

  const [rewards, setRewards] = useState([]);
  const [rewardsLoading, setRewardsLoading] = useState(true);

  useEffect(() => {
    if (isAuthenticated) {
      setDashboardLoading(true);
      getDashboardData()
        .then((data) => setDashboardData(data))
        .catch((err) => console.error('Failed to fetch dashboard data:', err))
        .finally(() => setDashboardLoading(false));
    }
  }, [isAuthenticated]);

  useEffect(() => {
    if (user) {
      setRewardsLoading(true);
      setTimeout(() => {
        setRewardsLoading(false);
      }, 1500);
    }
  }, [user]);

  const handleRefresh = async () => {
    const sessionPromise = login(localStorage.getItem('authToken'), true);
    const dashboardPromise = getDashboardData();
    const [, dashboardResult] = await Promise.all([
      sessionPromise,
      dashboardPromise,
    ]);
    setDashboardData(dashboardResult);
  };

  if (authLoading || configLoading || dashboardLoading || !user) {
    return <MyPointsSkeleton />;
  }
  if (!isAuthenticated) {
    router.push('/');
    return null;
  }

  const fullUserForCalc = {
    ...user,
    allRanks,
    lifetimePoints: dashboardData?.lifetime_points ?? 0,
  };
  const { nextRank, progressPercentage, pointsNeeded } =
    calculateRankProgress(fullUserForCalc);

  return (
    <PullToRefresh onRefresh={handleRefresh}>
      <PageContainer>
        {/* --- Member Card --- */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-2xl font-bold capitalize tracking-tight">
              {user.firstName || 'Member'}
            </CardTitle>
            <CardDescription>
              {user.rank.name} {settings.brand_personality?.rank_name || 'Tier'}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-center">
              <span className="text-6xl font-bold text-primary">
                <AnimatedCounter value={user.points_balance} />
              </span>
              <p className="text-sm text-muted-foreground">
                {settings.brand_personality?.points_name || 'Points'}
              </p>
            </div>
          </CardContent>
        </Card>

        {/* --- Next Rank Progress Card --- */}
        {nextRank ? (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="text-lg">
                Next {settings.brand_personality?.rank_name || 'Rank'}:{' '}
                {nextRank.name}
              </CardTitle>
              <CardDescription>
                {pointsNeeded.toLocaleString()}{' '}
                {settings.brand_personality?.points_name || 'Points'} to go!
              </CardDescription>
            </CardHeader>
            <CardContent>
              <AnimatedProgressBar
                progress={progressPercentage}
                barColor="bg-primary"
              />
              {nextRank.benefits?.[0] && (
                <p className="mt-2 text-center text-xs text-muted-foreground">
                  Next up: {nextRank.benefits[0]}
                </p>
              )}
            </CardContent>
            <CardFooter>
              <Link
                href="/how-to-earn"
                className="w-full text-center text-sm font-medium text-primary underline-offset-4 hover:underline"
              >
                View all ranks and benefits
              </Link>
            </CardFooter>
          </Card>
        ) : (
          <Card className="mb-6 p-4 text-center">
            {/* --- START FIX: Changed single quotes to curly braces and backticks --- */}
            <p className="font-bold text-primary">
              {`üéâ You've reached the highest rank!`}
            </p>
            {/* --- END FIX --- */}
          </Card>
        )}
        
        {/* --- Add the new Referral Card component --- */}
        <div className="mb-6">
          <ReferralCard />
        </div>

        {/* --- Rewards For You Section (Placeholder) --- */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle className="text-lg">Rewards For You</CardTitle>
            <Link href="/catalog">
              <Button variant="ghost" size="sm">
                View All <ChevronRightIcon className="ml-1 h-4 w-4" />
              </Button>
            </Link>
          </CardHeader>
          <CardContent>
            {rewardsLoading ? (
              <div className="grid grid-cols-3 gap-4">
                <div className="space-y-2 text-center">
                  <Skeleton className="aspect-square rounded-lg bg-gray-100" />
                  <Skeleton className="mx-auto h-4 w-20" />
                </div>
                <div className="space-y-2 text-center">
                  <Skeleton className="aspect-square rounded-lg bg-gray-100" />
                  <Skeleton className="mx-auto h-4 w-20" />
                </div>
                <div className="space-y-2 text-center">
                  <Skeleton className="aspect-square rounded-lg bg-gray-100" />
                  <Skeleton className="mx-auto h-4 w-20" />
                </div>
              </div>
            ) : rewards.length > 0 ? (
              <div className="grid grid-cols-3 gap-4">
                {/* This will be populated once we fetch rewards */}
              </div>
            ) : (
              <p className="px-4 py-8 text-center text-sm text-muted-foreground">
                You have no eligible rewards yet. Keep scanning to earn points!
              </p>
            )}
          </CardContent>
        </Card>
      </PageContainer>
    </PullToRefresh>
  );
}
</file>

<file path="src/app/scan/page.js">
'use client';

import { useEffect, useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';
import { useModal } from '@/context/ModalContext';
import { claimCodeV2 } from '@/services/rewardsService';
import { showToast } from '@/components/CustomToast';
import { triggerHapticFeedback } from '@/utils/haptics';
import PageContainer from '@/components/PageContainer';
import {
  ArrowPathIcon,
  QrCodeIcon,
  CameraIcon,
  GiftIcon,
  StarIcon,
} from '@heroicons/react/24/outline';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

export default function ScanPage() {
  const { login, updateUserPoints } = useAuth();
  const router = useRouter();
  const { openWelcomeModal, openReportScanModal, openAchievementModal } =
    useModal();

  const [view, setView] = useState('landing');
  const [scannerError, setScannerError] = useState('');
  const scannerRef = useRef(null);

  const startScanner = async () => {
    triggerHapticFeedback();
    setView('scanning');
    setScannerError('');

    try {
      const { Html5QrcodeScanner } = await import('html5-qrcode');

      setTimeout(() => {
        if (scannerRef.current) return;
        const scannerRegionEl = document.getElementById('scanner-region');
        if (!scannerRegionEl) return;

        const onScanSuccess = (decodedText) => {
          let code = decodedText;
          try {
            const url = new URL(decodedText);
            code = url.searchParams.get('code') || decodedText;
          } catch (e) {
            // Not a valid URL, assume the text is the code
          }

          if (code) {
            processClaim(code);
          } else {
            showToast(
              'error',
              'Invalid QR Code',
              'The scanned code is not a valid CannaRewards code.'
            );
          }
        };
        const onScanFailure = (error) => {
          // This callback can be noisy, so we'll keep it quiet unless we need to debug.
        };

        const scanner = new Html5QrcodeScanner(
          'scanner-region',
          { fps: 10, qrbox: { width: 250, height: 250 } },
          false
        );
        scanner.render(onScanSuccess, onScanFailure);
        scannerRef.current = scanner;
      }, 100);
    } catch (error) {
      console.error('Failed to load scanner library', error);
      setScannerError(
        'Could not load scanner. Please check your connection and try again.'
      );
      setView('landing');
    }
  };

  const processClaim = async (code) => {
    if (scannerRef.current) {
      scannerRef.current
        .clear()
        .catch((error) => console.error('Scanner failed to clear.', error));
      scannerRef.current = null;
    }
    setView('processing');
    triggerHapticFeedback();

    try {
      const response = await claimCodeV2(code);

      // Instantly update the UI with the new point balance.
      updateUserPoints(response.new_points_balance);

      // Refresh the full session in the background for consistency.
      login(localStorage.getItem('authToken'), true);

      // Inspect the rich response from the backend to decide what UI to show.
      const firstScanEvent = response.triggered_events?.find(
        (e) => e.type === 'first_scan_bonus'
      );
      const achievementEvent = response.triggered_events?.find(
        (e) => e.type === 'achievement_unlocked'
      );
      const multiplierEvent = response.triggered_events?.find(
        (e) => e.type === 'temporary_multiplier_applied'
      );

      if (firstScanEvent) {
        // The backend determined this was a first scan. We show the welcome modal.
        openWelcomeModal(firstScanEvent.details);
        router.push('/my-points');
      } else if (achievementEvent) {
        // The backend determined an achievement was unlocked. We show the achievement modal.
        openAchievementModal(achievementEvent.details);
        router.push('/my-points');
      } else if (multiplierEvent) {
        // The backend applied a special multiplier. We show a celebratory toast.
        showToast(
          'success',
          `${multiplierEvent.details.multiplier}x Bonus!`,
          response.message
        );
        router.push('/');
      } else {
        // It was a standard scan. Show a simple success toast.
        showToast('success', 'Points Added!', response.message);
        router.push('/');
      }
    } catch (err) {
      showToast('error', 'Scan Failed', err.message);
      // We can add logic here later to check the error code and open the report modal
      router.push('/');
    }
  };

  useEffect(() => {
    return () => {
      if (scannerRef.current) {
        scannerRef.current.clear().catch((error) => {
          /* Suppress errors on unmount */
        });
      }
    };
  }, []);

  return (
    <PageContainer>
      <div className="flex h-full flex-col items-center justify-center">
        {view === 'landing' && (
          <div className="w-full text-center">
            <h1 className="mb-2 text-2xl font-bold text-foreground">
              Authenticate Your Product
            </h1>
            <p className="mb-8 text-muted-foreground">
              Scan the QR code to earn points and unlock rewards.
            </p>

            <div className="mb-10 space-y-4">
              <Card>
                <CardContent className="flex items-center p-4">
                  <QrCodeIcon className="mr-4 h-8 w-8 text-primary" />
                  <div>
                    <h3 className="text-left font-semibold">
                      Step 1: Scan QR Code
                    </h3>
                    <p className="text-left text-sm text-muted-foreground">
                      Locate and scan the code on your product.
                    </p>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="flex items-center p-4">
                  <GiftIcon className="mr-4 h-8 w-8 text-primary" />
                  <div>
                    <h3 className="text-left font-semibold">
                      Step 2: Get Rewards
                    </h3>
                    <p className="text-left text-sm text-muted-foreground">
                      Instantly receive points and special offers.
                    </p>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="flex items-center p-4">
                  <StarIcon className="mr-4 h-8 w-8 text-primary" />
                  <div>
                    <h3 className="text-left font-semibold">
                      Step 3: Collect & Redeem
                    </h3>
                    <p className="text-left text-sm text-muted-foreground">
                      Use your points for exclusive items.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>

            <Button
              onClick={startScanner}
              size="lg"
              className="h-14 w-full text-lg"
            >
              <CameraIcon className="mr-2 h-6 w-6" />
              Start Scanning
            </Button>
          </div>
        )}

        {view === 'scanning' && (
          <div className="w-full text-center">
            <h2 className="mb-2 text-xl font-semibold text-foreground">
              Scan QR Code
            </h2>
            <p className="mb-6 text-muted-foreground">
              Place the QR code inside the frame.
            </p>

            <div
              id="scanner-region"
              className="mx-auto aspect-square w-full max-w-xs overflow-hidden rounded-lg border-2 border-dashed border-muted bg-secondary"
            ></div>

            {scannerError && (
              <p className="mt-4 text-center text-destructive">
                {scannerError}
              </p>
            )}

            <Button
              onClick={() => router.push('/')}
              variant="ghost"
              className="mt-8"
            >
              Cancel
            </Button>
          </div>
        )}

        {view === 'processing' && (
          <div className="text-center">
            <ArrowPathIcon className="mx-auto h-12 w-12 animate-spin text-primary" />
            <p className="mt-4 text-lg text-muted-foreground">
              Validating your code...
            </p>
          </div>
        )}
      </div>
    </PageContainer>
  );
}
</file>

<file path="src/components/LoginForm.js">
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useAuth } from '../context/AuthContext';
import { loginUser } from '@/services/authService'; // Correctly import the v2-compliant function
import { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';
import { showToast } from './CustomToast';
import { triggerHapticFeedback } from '@/utils/haptics';
import { FloatingLabelInput } from './FloatingLabelInput'; // Using this for consistency
import { motion, AnimatePresence } from 'framer-motion';

// --- SHADCN IMPORTS ---
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";

export default function LoginForm({ onSwitchToRegister }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [passwordVisible, setPasswordVisible] = useState(false);

  const { login } = useAuth();

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    triggerHapticFeedback();

    try {
      // Step 1: Call the updated loginUser service function.
      const data = await loginUser(email, password);
      // Step 2: Pass the received token to the AuthContext.
      // The AuthContext will handle state updates and redirection.
      login(data.token);
    } catch (err) {
      showToast('error', 'Login Failed', err.message);
      setLoading(false); // Only set loading to false on failure.
    }
  };

  return (
    <Card className="w-full max-w-sm text-left border-none shadow-none bg-transparent">
      <form onSubmit={handleSubmit}>
        <CardHeader className="text-center">
          <CardTitle className="text-2xl">Login</CardTitle>
          <CardDescription>Welcome back! Please enter your credentials.</CardDescription>
        </CardHeader>

        <CardContent className="space-y-8 pt-4">
          <FloatingLabelInput
            id="email-login"
            label="Email Address"
            type="email"
            autoComplete="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          <div className="space-y-2">
            <div className="flex items-center justify-between">
                <Label htmlFor="password-login">Password</Label>
                <Link href="/forgot-password" className="text-sm font-medium text-primary hover:underline underline-offset-4">
                    Forgot Password?
                </Link>
            </div>
            <div className="relative">
              <Input
                id="password-login"
                type={passwordVisible ? 'text' : 'password'}
                autoComplete="current-password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="pr-10"
              />
              <div
                className="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer text-muted-foreground"
                onClick={() => setPasswordVisible(!passwordVisible)}
              >
                <AnimatePresence mode="popLayout" initial={false}>
                  {passwordVisible ? (
                    <motion.div
                      key="eye-slash"
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.8 }}
                      transition={{ duration: 0.2 }}
                    >
                      <EyeSlashIcon className="h-5 w-5" />
                    </motion.div>
                  ) : (
                    <motion.div
                      key="eye-open"
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.8 }}
                      transition={{ duration: 0.2 }}
                    >
                      <EyeIcon className="h-5 w-5" />
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </div>
          </div>
        </CardContent>

        <CardFooter className="flex flex-col gap-4 pt-8">
          <Button type="submit" className="w-full" disabled={loading}>
            {loading ? 'Logging in...' : 'Log In'}
          </Button>
          
          <p className="text-center text-sm text-muted-foreground">
            Don&apos;t have an account?{' '}
            <button
              type="button"
              onClick={onSwitchToRegister}
              className="font-medium text-primary hover:underline underline-offset-4"
            >
              Sign Up
            </button>
          </p>
        </CardFooter>
      </form>
    </Card>
  );
}
</file>

<file path="package.json">
{
  "name": "cannarewards-pwa",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "analyze": "cross-env ANALYZE=true next build",
    "test": "jest",
    "test:watch": "jest --watch",
    "prepare": "husky"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.3",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "axios": "^1.7.2",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^11.2.10",
    "html5-qrcode": "^2.3.8",
    "lucide-react": "^0.541.0",
    "next": "14.2.4",
    "nprogress": "^0.2.0",
    "qrcode.react": "^4.2.0",
    "react": "18",
    "react-dom": "18",
    "react-hot-toast": "^2.4.1",
    "react-simple-pull-to-refresh": "^1.3.3",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "zxcvbn": "^4.4.2"
  },
  "devDependencies": {
    "@next/bundle-analyzer": "^14.2.4",
    "@tailwindcss/typography": "^0.5.13",
    "@testing-library/jest-dom": "^6.4.5",
    "@testing-library/react": "^15.0.7",
    "autoprefixer": "10.4.19",
    "cross-env": "^7.0.3",
    "eslint": "8",
    "eslint-config-next": "14.2.4",
    "eslint-plugin-prettier": "^5.1.3",
    "husky": "^9.0.11",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "lint-staged": "^15.2.7",
    "postcss": "8.4.38",
    "prettier": "^3.3.2",
    "prettier-plugin-tailwindcss": "^0.6.5",
    "tailwindcss": "3.4.4"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx,html,css,md}": "prettier --write"
  }
}
</file>

<file path="src/app/orders/page.js">
'use client';

import { useEffect, useState, useCallback } from 'react';
import { useAuth } from '@/context/AuthContext';
import { useRouter } from 'next/navigation';
import { getMyOrdersV2 } from '@/services/rewardsService';
import EmptyState from '@/components/EmptyState';
import DynamicHeader from '@/components/DynamicHeader';
import ImageWithLoader from '@/components/ImageWithLoader';
import StaggeredList from '@/components/StaggeredList';
import { ShoppingCartIcon } from '@heroicons/react/24/outline';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import PullToRefresh from 'react-simple-pull-to-refresh';
import { Skeleton } from '@/components/ui/skeleton';

const TABS = {
  ONGOING: 'Ongoing',
  COMPLETED: 'Completed',
  CANCELLED: 'Cancelled',
};
const STATUS_MAP = {
  [TABS.ONGOING]: ['Processing'],
  [TABS.COMPLETED]: ['Completed'],
  [TABS.CANCELLED]: ['Cancelled', 'Failed', 'Refunded'],
};

const OrderSkeleton = () => (
  <div className="space-y-4">
    <Skeleton className="h-24 w-full rounded-lg" />
    <Skeleton className="h-24 w-full rounded-lg" />
    <Skeleton className="h-24 w-full rounded-lg" />
  </div>
);

export default function OrdersPage() {
  const { isAuthenticated, loading: authLoading } = useAuth();
  const router = useRouter();
  const [allOrders, setAllOrders] = useState([]);
  const [filteredOrders, setFilteredOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState(TABS.ONGOING);

  const fetchOrders = useCallback(async () => {
    if (!isAuthenticated) return;
    setLoading(true);
    try {
      const orderData = await getMyOrdersV2();
      setAllOrders(orderData);
    } catch (err) {
      console.error('Failed to fetch orders:', err);
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated]);

  useEffect(() => {
    const statusesToShow = STATUS_MAP[activeTab];
    const filtered = allOrders.filter((order) =>
      statusesToShow.includes(order.status)
    );
    setFilteredOrders(filtered);
  }, [activeTab, allOrders]);

  useEffect(() => {
    if (!authLoading && !isAuthenticated) {
      router.push('/');
      return;
    }
    if (isAuthenticated) {
      fetchOrders();
    }
  }, [isAuthenticated, authLoading, router, fetchOrders]);

  const handleRefresh = async () => {
    await fetchOrders();
  };

  const renderContent = () => {
    if (loading || authLoading) {
      return <OrderSkeleton />;
    }
    if (filteredOrders.length > 0) {
      return (
        <StaggeredList className="space-y-4" key={activeTab}>
          {filteredOrders.map((order) => (
            <Card key={order.orderId}>
              <CardContent className="flex items-center space-x-4 p-4">
                <div className="flex h-20 w-20 flex-shrink-0 items-center justify-center overflow-hidden rounded-lg bg-secondary">
                  <ImageWithLoader
                    src={order.imageUrl}
                    alt={order.items}
                    className="h-full w-full object-cover"
                  />
                </div>
                <div className="flex-grow">
                  <div className="flex items-start justify-between">
                    <div>
                      <p className="text-base font-bold leading-tight text-card-foreground">
                        {order.items}
                      </p>
                      <p className="text-sm text-muted-foreground">
                        Order #{order.orderId}
                      </p>
                    </div>
                    <Badge
                      variant={
                        order.status === 'Completed' ? 'default' : 'secondary'
                      }
                    >
                      {order.status}
                    </Badge>
                  </div>
                  <p className="mt-2 text-xs text-muted-foreground">
                    {order.date}
                  </p>
                </div>
              </CardContent>
            </Card>
          ))}
        </StaggeredList>
      );
    }
    return (
      <EmptyState
        Icon={ShoppingCartIcon}
        title={`No ${activeTab.toLowerCase()} orders`}
        message="Your redeemed rewards will appear here after you claim them from the catalog."
        buttonLabel="Redeem Your First Reward"
        buttonHref="/catalog"
      />
    );
  };

  return (
    <PullToRefresh onRefresh={handleRefresh}>
      <div className="min-h-screen bg-white">
        <div className="mx-auto w-full max-w-md">
          <div className="sticky top-0 z-10 border-b border-gray-200 bg-white px-4 pt-4">
            <DynamicHeader title="My Orders" backLink="/profile" />
            <div className="mb-4 flex items-center justify-between rounded-lg bg-gray-100 p-1">
              {Object.values(TABS).map((tabName) => (
                <button
                  key={tabName}
                  onClick={() => setActiveTab(tabName)}
                  className={`w-full rounded-md py-2 text-sm font-semibold transition-colors ${activeTab === tabName ? 'bg-white text-gray-800 shadow' : 'bg-transparent text-gray-500 hover:bg-gray-200'}`}
                >
                  {tabName}
                </button>
              ))}
            </div>
          </div>
          <div className="p-4" style={{ paddingBottom: '5rem' }}>
            {renderContent()}
          </div>
        </div>
      </div>
    </PullToRefresh>
  );
}
</file>

<file path="src/components/RegisterForm.js">
'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { useRouter } from 'next/navigation';
import { registerUser, loginUser } from '@/services/authService';
import { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';
import zxcvbn from 'zxcvbn';
import { showToast } from './CustomToast';
import { motion, AnimatePresence } from 'framer-motion';

// --- SHADCN IMPORTS ---
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import AnimatedProgressBar from './AnimatedProgressBar';
import ImageWithLoader from './ImageWithLoader';

export default function RegisterForm({ onSwitchToLogin, claimCode = null, rewardPreview = null }) {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [phone, setPhone] = useState('');
  const [agreedToTerms, setAgreedToTerms] = useState(false);
  const [agreedToMarketing, setAgreedToMarketing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [passwordStrength, setPasswordStrength] = useState({ score: 0, feedback: '' });

  const { login } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (password) {
      const result = zxcvbn(password);
      setPasswordStrength({
        score: result.score,
        feedback: result.feedback?.warning || ''
      });
    } else {
      setPasswordStrength({ score: 0, feedback: '' });
    }
  }, [password]);

  const getStrengthIndicator = () => {
      switch (passwordStrength.score) {
          case 0: return { progress: 0, barColor: 'bg-gray-200', textColor: 'text-gray-400', label: '' };
          case 1: return { progress: 25, barColor: 'bg-red-500', textColor: 'text-red-500', label: 'Weak' };
          case 2: return { progress: 50, barColor: 'bg-yellow-500', textColor: 'text-yellow-500', label: 'Fair' };
          case 3: return { progress: 75, barColor: 'bg-blue-500', textColor: 'text-blue-500', label: 'Good' };
          case 4: return { progress: 100, barColor: 'bg-green-500', textColor: 'text-green-500', label: 'Strong' };
          default: return { progress: 0, barColor: 'bg-gray-200', textColor: 'text-gray-400', label: '' };
      }
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (!agreedToTerms) {
      showToast("error", "Agreement Required", "You must certify your age and agree to the terms.");
      return;
    }
    setLoading(true);

    try {
      const registrationPayload = {
        email, password,
        firstName, lastName, phone,
        agreedToMarketing,
        agreedToTerms,
      };

      const storedRefCode = localStorage.getItem('referralCode');
      if (storedRefCode) {
          registrationPayload.referralCode = storedRefCode;
      }
      
      if (claimCode) {
        registrationPayload.code = claimCode;
      }
      
      // Step 1: Register the user using the new v2 service function.
      await registerUser(registrationPayload);

      // Step 2: Automatically log the user in after successful registration.
      const loginData = await loginUser(email, password);
      login(loginData.token); // This will set the auth token and redirect to the dashboard.

      if (storedRefCode) {
          localStorage.removeItem('referralCode');
      }

      // Handle special redirects for first-time scans or referral gifts.
      if (rewardPreview?.id) {
        let redirectUrl = `/catalog/${rewardPreview.id}`;
        if (rewardPreview.isReferralGift || claimCode) {
            redirectUrl += '?first_scan=true';
        }
        router.push(redirectUrl);
      } else {
        // Default redirect is handled by the AuthContext, but we can be explicit.
        router.push('/');
      }

    } catch (err) {
      showToast('error', 'Registration Failed', err.message);
      setLoading(false);
    }
  };
  
  const { progress, barColor, textColor, label } = getStrengthIndicator();

  return (
    <Card className="w-full max-w-sm text-left border-none shadow-none bg-transparent">
      <form onSubmit={handleSubmit}>
        <CardHeader className="text-center">
          {rewardPreview && (
            <div className="mb-4">
              <div className="bg-white p-4 rounded-lg shadow-inner border max-w-[250px] mx-auto">
                <div className="w-full aspect-square bg-gray-100 rounded-lg overflow-hidden mb-3">
                  <ImageWithLoader src={rewardPreview.image} alt={rewardPreview.name} className="w-full h-full object-cover" />
                </div>
                <p className="text-xs text-muted-foreground">YOUR WELCOME REWARD</p>
                <p className="text-lg font-semibold text-card-foreground">{rewardPreview.name}</p>
              </div>
            </div>
          )}
          <CardTitle className="text-2xl">Create Account</CardTitle>
          <CardDescription>Enter your details below to get started.</CardDescription>
        </CardHeader>

        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="firstName">First Name</Label>
              <Input id="firstName" placeholder="Jane" required value={firstName} onChange={e => setFirstName(e.target.value)} autoComplete="given-name" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="lastName">Last Name</Label>
              <Input id="lastName" placeholder="Doe" required value={lastName} onChange={e => setLastName(e.target.value)} autoComplete="family-name" />
            </div>
          </div>
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input id="email" type="email" placeholder="jane@example.com" required value={email} onChange={e => setEmail(e.target.value)} autoComplete="email" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <div className="relative">
                <Input 
                    id="password" 
                    type={passwordVisible ? 'text' : 'password'} 
                    required 
                    value={password} 
                    onChange={e => setPassword(e.target.value)} 
                    autoComplete="new-password"
                    className="pr-10"
                />
                <div 
                    className="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer text-muted-foreground"
                    onClick={() => setPasswordVisible(!passwordVisible)}
                >
                  <AnimatePresence mode="popLayout" initial={false}>
                    {passwordVisible ? (
                      <motion.div
                        key="eye-slash-reg"
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        exit={{ opacity: 0, scale: 0.8 }}
                        transition={{ duration: 0.2 }}
                      >
                        <EyeSlashIcon className="h-5 w-5" />
                      </motion.div>
                    ) : (
                      <motion.div
                        key="eye-open-reg"
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        exit={{ opacity: 0, scale: 0.8 }}
                        transition={{ duration: 0.2 }}
                      >
                        <EyeIcon className="h-5 w-5" />
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
            </div>
            {password.length > 0 && (
              <div className="mt-2">
                  <AnimatedProgressBar progress={progress} barColor={barColor} />
                  <div className="flex justify-between items-center">
                      <p className={`text-xs mt-1 ${textColor}`}>{passwordStrength.feedback}</p>
                      <p className={`text-xs mt-1 font-medium ${textColor}`}>{label}</p>
                  </div>
              </div>
            )}
          </div>
          <div className="space-y-2">
            <Label htmlFor="phone">Phone Number (Optional)</Label>
            <Input id="phone" type="tel" placeholder="(123) 456-7890" value={phone} onChange={e => setPhone(e.target.value)} autoComplete="tel" />
          </div>

          <div className="items-top flex space-x-2">
            <input type="checkbox" id="terms" checked={agreedToTerms} onChange={e => setAgreedToTerms(e.target.checked)} className="h-4 w-4 mt-1 rounded border-gray-300 text-primary focus:ring-primary" />
            <div className="grid gap-1.5 leading-none">
                <label htmlFor="terms" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    I certify that I am 21+ and agree to the <a href="/terms" target="_blank" className="underline text-primary">Terms and Conditions</a>.
                </label>
            </div>
          </div>

          <div className="items-top flex space-x-2">
            <input type="checkbox" id="marketing" checked={agreedToMarketing} onChange={e => setAgreedToMarketing(e.target.checked)} className="h-4 w-4 mt-1 rounded border-gray-300 text-primary focus:ring-primary" />
            <label htmlFor="marketing" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                I agree to receive marketing communications (optional).
            </label>
          </div>
        </CardContent>

        <CardFooter className="flex flex-col gap-4">
          <Button type="submit" className="w-full" disabled={loading}>
            {loading ? 'Creating Account...' : (rewardPreview ? 'Sign Up & Claim Reward' : 'Create Account')}
          </Button>
          
          {!(claimCode || rewardPreview?.isReferralGift) && (
            <p className="text-center text-sm text-muted-foreground">
              Already have an account?{' '}
              <button type="button" onClick={onSwitchToLogin} className="font-medium text-primary hover:underline underline-offset-4" disabled={loading}>
                Log In
              </button>
            </p>
          )}
        </CardFooter>
      </form>
    </Card>
  );
}
</file>

<file path="src/app/catalog/[productId]/page.js">
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';
import { useModal } from '@/context/ModalContext';
import { getProductById } from '@/services/woocommerceService';
import { redeemRewardV2 } from '@/services/rewardsService';
import ProductDetailSkeleton from '@/components/ProductDetailSkeleton';
import ImageWithLoader from '@/components/ImageWithLoader';
import DynamicHeader from '@/components/DynamicHeader';
import ShippingFormModal from '@/components/ShippingFormModal';
import SuccessModal from '@/components/SuccessModal';
import { showToast } from '@/components/CustomToast';
import { triggerHapticFeedback } from '@/utils/haptics';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { AspectRatio } from '@/components/ui/aspect-ratio';
import { Separator } from '@/components/ui/separator';

export default function ProductDetailPage() {
  const { user, loading: authLoading, updateUserPoints, login } = useAuth();
  const { triggerConfetti } = useModal();
  const router = useRouter();
  const params = useParams();
  const { productId } = params;

  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showShippingModal, setShowShippingModal] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [isRedeeming, setIsRedeeming] = useState(false);

  useEffect(() => {
    if (product?.is_eligible_for_free_claim) {
      triggerConfetti();
    }
  }, [product, triggerConfetti]);

  useEffect(() => {
    if (productId) {
      const fetchProduct = async () => {
        setLoading(true);
        try {
          const productData = await getProductById(productId);
          const pointsMeta = productData.meta_data.find(
            (meta) => meta.key === 'points_cost'
          );
          const formattedProduct = {
            id: productData.id,
            name: productData.name,
            images: productData.images,
            description: productData.description,
            points_cost: pointsMeta ? parseInt(pointsMeta.value, 10) : null,
            // --- FIX: Store the new flag from the API ---
            is_eligible_for_free_claim: productData.is_eligible_for_free_claim,
          };
          setProduct(formattedProduct);
        } catch (error) {
          showToast('error', 'Error', 'Could not load product details.');
        } finally {
          setLoading(false);
        }
      };
      fetchProduct();
    }
  }, [productId]);

  const handleRedeem = () => {
    triggerHapticFeedback();
    // The canAfford check now handles all logic
    if (canAfford) {
      setShowShippingModal(true);
    }
  };

  const handleShippingSubmit = async (shippingDetails) => {
    setIsRedeeming(true);
    setShowShippingModal(false);
    try {
      const result = await redeemRewardV2(product.id, shippingDetails);

      updateUserPoints(result.new_points_balance);
      login(localStorage.getItem('authToken'), true);

      setShowSuccessModal(true);
    } catch (error) {
      showToast('error', 'Redemption Failed', error.message);
    } finally {
      setIsRedeeming(false);
    }
  };

  if (authLoading || loading || !product) {
    return <ProductDetailSkeleton />;
  }

  if (!product.points_cost) {
    return (
      <div className="p-10 text-center">
        <h1 className="text-2xl font-bold">Reward Not Found</h1>
        <p>This item is not available for redemption.</p>
        <Button onClick={() => router.back()} className="mt-4">
          Go Back
        </Button>
      </div>
    );
  }

  // --- FIX: Logic is now simpler and relies on the backend flag ---
  const canAfford =
    product.is_eligible_for_free_claim ||
    (user && product.points_cost && user.points_balance >= product.points_cost);

  const pointsNeeded = product.points_cost
    ? product.points_cost - (user?.points_balance || 0)
    : 0;
  const imageUrl =
    product.images?.[0]?.src || 'https://via.placeholder.com/300';

  return (
    <>
      <main className="bg-white">
        <div className="mx-auto w-full max-w-md">
          <div className="sticky top-0 z-10 bg-white/80 backdrop-blur-sm">
            <DynamicHeader title="" backLink="/catalog" />
          </div>

          <div className="p-4">
            <Card className="mb-6 overflow-hidden border-none shadow-none">
              <CardContent className="p-0">
                <AspectRatio ratio={1 / 1}>
                  <ImageWithLoader
                    src={imageUrl}
                    alt={product.name}
                    className="h-full w-full rounded-lg object-cover"
                  />
                </AspectRatio>
              </CardContent>
            </Card>

            {/* --- FIX: Banner is now controlled by the backend flag --- */}
            {product.is_eligible_for_free_claim && (
              <div className="mb-4 border-l-4 border-yellow-400 bg-yellow-50 p-4 text-center">
                <h2 className="text-xl font-bold text-yellow-800">
                  Congratulations!
                </h2>
                <p className="text-yellow-700">
                  You've unlocked this reward with your first scan!
                </p>
              </div>
            )}

            <h1 className="mb-2 text-3xl font-bold text-foreground">
              {product.name}
            </h1>
            <p className="mb-6 text-2xl font-semibold text-primary">
              {product.points_cost.toLocaleString()} Points
            </p>

            <Button
              onClick={handleRedeem}
              disabled={!canAfford || isRedeeming}
              size="lg"
              className="h-14 w-full text-lg"
            >
              {isRedeeming
                ? 'Processing...'
                // --- FIX: Button text now controlled by the backend flag ---
                : product.is_eligible_for_free_claim
                  ? 'Claim Your Welcome Gift!'
                  : canAfford
                    ? `Redeem for ${product.points_cost.toLocaleString()} Points`
                    : `Earn ${pointsNeeded.toLocaleString()} more points`}
            </Button>

            <Separator className="my-8" />

            <div className="space-y-4">
              <h2 className="text-xl font-semibold text-foreground">
                Description
              </h2>
              <div
                className="prose prose-sm max-w-none text-muted-foreground"
                dangerouslySetInnerHTML={{
                  __html:
                    product.description || '<p>No description available.</p>',
                }}
              />
            </div>
          </div>
        </div>
      </main>

      {showShippingModal && (
        <ShippingFormModal
          onSubmit={handleShippingSubmit}
          onCancel={() => setShowShippingModal(false)}
          currentUser={user}
        />
      )}

      {showSuccessModal && (
        <SuccessModal
          title="Redemption Successful!"
          message="Your reward is on its way. You can view the order details in your profile."
          buttonLabel="View My Orders"
          onButtonClick={() => {
            setShowSuccessModal(false);
            router.push('/orders');
          }}
        />
      )}
    </>
  );
}
</file>

</files>
